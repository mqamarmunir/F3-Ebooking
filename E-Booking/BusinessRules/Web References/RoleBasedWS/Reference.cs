//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34003.
// 
#pragma warning disable 1591

namespace BusinessRules.RoleBasedWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RoleBasedSoap", Namespace="http://cad.valentiatech.com/")]
    public partial class RoleBased : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ValidateUser2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserAndLogInvalidEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserForAmbulanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserForNationalIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateWebUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateWebUserEbookingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAccessSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchFailedLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchInvalidMachinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterInvalidMachinesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RoleBased() {
            this.Url = global::BusinessRules.Properties.Settings.Default.BusinessRules_RoleBased_RoleBased;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ValidateUser2CompletedEventHandler ValidateUser2Completed;
        
        /// <remarks/>
        public event ValidateUserCompletedEventHandler ValidateUserCompleted;
        
        /// <remarks/>
        public event ValidateUserAndLogInvalidEntryCompletedEventHandler ValidateUserAndLogInvalidEntryCompleted;
        
        /// <remarks/>
        public event ValidateUserForAmbulanceCompletedEventHandler ValidateUserForAmbulanceCompleted;
        
        /// <remarks/>
        public event ValidateUserForNationalIdCompletedEventHandler ValidateUserForNationalIdCompleted;
        
        /// <remarks/>
        public event ValidateWebUserCompletedEventHandler ValidateWebUserCompleted;
        
        /// <remarks/>
        public event ValidateWebUserEbookingCompletedEventHandler ValidateWebUserEbookingCompleted;
        
        /// <remarks/>
        public event GetUserAccessSettingsCompletedEventHandler GetUserAccessSettingsCompleted;
        
        /// <remarks/>
        public event SearchFailedLoginCompletedEventHandler SearchFailedLoginCompleted;
        
        /// <remarks/>
        public event SearchInvalidMachinesCompletedEventHandler SearchInvalidMachinesCompleted;
        
        /// <remarks/>
        public event RegisterInvalidMachinesCompletedEventHandler RegisterInvalidMachinesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateUser2", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ValidateUser2(string email, string password, string ipAddress, string machineSignature) {
            object[] results = this.Invoke("ValidateUser2", new object[] {
                        email,
                        password,
                        ipAddress,
                        machineSignature});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUser2Async(string email, string password, string ipAddress, string machineSignature) {
            this.ValidateUser2Async(email, password, ipAddress, machineSignature, null);
        }
        
        /// <remarks/>
        public void ValidateUser2Async(string email, string password, string ipAddress, string machineSignature, object userState) {
            if ((this.ValidateUser2OperationCompleted == null)) {
                this.ValidateUser2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUser2OperationCompleted);
            }
            this.InvokeAsync("ValidateUser2", new object[] {
                        email,
                        password,
                        ipAddress,
                        machineSignature}, this.ValidateUser2OperationCompleted, userState);
        }
        
        private void OnValidateUser2OperationCompleted(object arg) {
            if ((this.ValidateUser2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUser2Completed(this, new ValidateUser2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateUser", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateUser(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, int AttemptsIn, out int pintUserID, out int pintStationID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] pbytarrPicture, out string pstrPicturePath, out bool pblnIsAdmin, out bool pblnIsMachineBlocked, out int iAttempts) {
            object[] results = this.Invoke("ValidateUser", new object[] {
                        pstrEmail,
                        pstrPassword,
                        pstrIPAddress,
                        pstrMachineSignature,
                        AttemptsIn});
            pintUserID = ((int)(results[1]));
            pintStationID = ((int)(results[2]));
            pbytarrPicture = ((byte[])(results[3]));
            pstrPicturePath = ((string)(results[4]));
            pblnIsAdmin = ((bool)(results[5]));
            pblnIsMachineBlocked = ((bool)(results[6]));
            iAttempts = ((int)(results[7]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, int AttemptsIn) {
            this.ValidateUserAsync(pstrEmail, pstrPassword, pstrIPAddress, pstrMachineSignature, AttemptsIn, null);
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, int AttemptsIn, object userState) {
            if ((this.ValidateUserOperationCompleted == null)) {
                this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
            }
            this.InvokeAsync("ValidateUser", new object[] {
                        pstrEmail,
                        pstrPassword,
                        pstrIPAddress,
                        pstrMachineSignature,
                        AttemptsIn}, this.ValidateUserOperationCompleted, userState);
        }
        
        private void OnValidateUserOperationCompleted(object arg) {
            if ((this.ValidateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateUserAndLogInvalidEntry", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("dummy")]
        public int ValidateUserAndLogInvalidEntry(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, string pcName, string machineName, int applicationType, int AttemptsIn, out int pintUserID, out int pintStationID, out bool pblnIsAdmin, out bool pblnIsMachineBlocked, out System.Data.DataSet dsSettings, out int iAttempts) {
            object[] results = this.Invoke("ValidateUserAndLogInvalidEntry", new object[] {
                        pstrEmail,
                        pstrPassword,
                        pstrIPAddress,
                        pstrMachineSignature,
                        pcName,
                        machineName,
                        applicationType,
                        AttemptsIn});
            pintUserID = ((int)(results[1]));
            pintStationID = ((int)(results[2]));
            pblnIsAdmin = ((bool)(results[3]));
            pblnIsMachineBlocked = ((bool)(results[4]));
            dsSettings = ((System.Data.DataSet)(results[5]));
            iAttempts = ((int)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserAndLogInvalidEntryAsync(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, string pcName, string machineName, int applicationType, int AttemptsIn) {
            this.ValidateUserAndLogInvalidEntryAsync(pstrEmail, pstrPassword, pstrIPAddress, pstrMachineSignature, pcName, machineName, applicationType, AttemptsIn, null);
        }
        
        /// <remarks/>
        public void ValidateUserAndLogInvalidEntryAsync(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, string pcName, string machineName, int applicationType, int AttemptsIn, object userState) {
            if ((this.ValidateUserAndLogInvalidEntryOperationCompleted == null)) {
                this.ValidateUserAndLogInvalidEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserAndLogInvalidEntryOperationCompleted);
            }
            this.InvokeAsync("ValidateUserAndLogInvalidEntry", new object[] {
                        pstrEmail,
                        pstrPassword,
                        pstrIPAddress,
                        pstrMachineSignature,
                        pcName,
                        machineName,
                        applicationType,
                        AttemptsIn}, this.ValidateUserAndLogInvalidEntryOperationCompleted, userState);
        }
        
        private void OnValidateUserAndLogInvalidEntryOperationCompleted(object arg) {
            if ((this.ValidateUserAndLogInvalidEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserAndLogInvalidEntryCompleted(this, new ValidateUserAndLogInvalidEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateUserForAmbulance", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateUserForAmbulance(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, out int pintUserID, out int pintStationID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] pbytarrPicture, out string pstrPicturePath, out bool pblnIsAdmin, out bool pblnIsMachineBlocked, out string nationalId) {
            object[] results = this.Invoke("ValidateUserForAmbulance", new object[] {
                        pstrEmail,
                        pstrPassword,
                        pstrIPAddress,
                        pstrMachineSignature});
            pintUserID = ((int)(results[1]));
            pintStationID = ((int)(results[2]));
            pbytarrPicture = ((byte[])(results[3]));
            pstrPicturePath = ((string)(results[4]));
            pblnIsAdmin = ((bool)(results[5]));
            pblnIsMachineBlocked = ((bool)(results[6]));
            nationalId = ((string)(results[7]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserForAmbulanceAsync(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature) {
            this.ValidateUserForAmbulanceAsync(pstrEmail, pstrPassword, pstrIPAddress, pstrMachineSignature, null);
        }
        
        /// <remarks/>
        public void ValidateUserForAmbulanceAsync(string pstrEmail, string pstrPassword, string pstrIPAddress, string pstrMachineSignature, object userState) {
            if ((this.ValidateUserForAmbulanceOperationCompleted == null)) {
                this.ValidateUserForAmbulanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserForAmbulanceOperationCompleted);
            }
            this.InvokeAsync("ValidateUserForAmbulance", new object[] {
                        pstrEmail,
                        pstrPassword,
                        pstrIPAddress,
                        pstrMachineSignature}, this.ValidateUserForAmbulanceOperationCompleted, userState);
        }
        
        private void OnValidateUserForAmbulanceOperationCompleted(object arg) {
            if ((this.ValidateUserForAmbulanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserForAmbulanceCompleted(this, new ValidateUserForAmbulanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateUserForNationalId", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateUserForNationalId(string pstrNationalId, string pstrIPAddress, string pstrMachineSignature, out int pintUserID, out int pintStationID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] pbytarrPicture, out string pstrPicturePath, out bool pblnIsAdmin, out bool pblnIsMachineBlocked, out string userName, out string password) {
            object[] results = this.Invoke("ValidateUserForNationalId", new object[] {
                        pstrNationalId,
                        pstrIPAddress,
                        pstrMachineSignature});
            pintUserID = ((int)(results[1]));
            pintStationID = ((int)(results[2]));
            pbytarrPicture = ((byte[])(results[3]));
            pstrPicturePath = ((string)(results[4]));
            pblnIsAdmin = ((bool)(results[5]));
            pblnIsMachineBlocked = ((bool)(results[6]));
            userName = ((string)(results[7]));
            password = ((string)(results[8]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserForNationalIdAsync(string pstrNationalId, string pstrIPAddress, string pstrMachineSignature) {
            this.ValidateUserForNationalIdAsync(pstrNationalId, pstrIPAddress, pstrMachineSignature, null);
        }
        
        /// <remarks/>
        public void ValidateUserForNationalIdAsync(string pstrNationalId, string pstrIPAddress, string pstrMachineSignature, object userState) {
            if ((this.ValidateUserForNationalIdOperationCompleted == null)) {
                this.ValidateUserForNationalIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserForNationalIdOperationCompleted);
            }
            this.InvokeAsync("ValidateUserForNationalId", new object[] {
                        pstrNationalId,
                        pstrIPAddress,
                        pstrMachineSignature}, this.ValidateUserForNationalIdOperationCompleted, userState);
        }
        
        private void OnValidateUserForNationalIdOperationCompleted(object arg) {
            if ((this.ValidateUserForNationalIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserForNationalIdCompleted(this, new ValidateUserForNationalIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateWebUser", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateWebUser(string pstrEmail, string pstrPassword, out int pintUserID, out bool pblnIsAdmin) {
            object[] results = this.Invoke("ValidateWebUser", new object[] {
                        pstrEmail,
                        pstrPassword});
            pintUserID = ((int)(results[1]));
            pblnIsAdmin = ((bool)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateWebUserAsync(string pstrEmail, string pstrPassword) {
            this.ValidateWebUserAsync(pstrEmail, pstrPassword, null);
        }
        
        /// <remarks/>
        public void ValidateWebUserAsync(string pstrEmail, string pstrPassword, object userState) {
            if ((this.ValidateWebUserOperationCompleted == null)) {
                this.ValidateWebUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateWebUserOperationCompleted);
            }
            this.InvokeAsync("ValidateWebUser", new object[] {
                        pstrEmail,
                        pstrPassword}, this.ValidateWebUserOperationCompleted, userState);
        }
        
        private void OnValidateWebUserOperationCompleted(object arg) {
            if ((this.ValidateWebUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateWebUserCompleted(this, new ValidateWebUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/ValidateWebUserEbooking", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateWebUserEbooking(string pstrEmail, string pstrPassword, out int pintUserID, out int pintRoleID) {
            object[] results = this.Invoke("ValidateWebUserEbooking", new object[] {
                        pstrEmail,
                        pstrPassword});
            pintUserID = ((int)(results[1]));
            pintRoleID = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateWebUserEbookingAsync(string pstrEmail, string pstrPassword) {
            this.ValidateWebUserEbookingAsync(pstrEmail, pstrPassword, null);
        }
        
        /// <remarks/>
        public void ValidateWebUserEbookingAsync(string pstrEmail, string pstrPassword, object userState) {
            if ((this.ValidateWebUserEbookingOperationCompleted == null)) {
                this.ValidateWebUserEbookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateWebUserEbookingOperationCompleted);
            }
            this.InvokeAsync("ValidateWebUserEbooking", new object[] {
                        pstrEmail,
                        pstrPassword}, this.ValidateWebUserEbookingOperationCompleted, userState);
        }
        
        private void OnValidateWebUserEbookingOperationCompleted(object arg) {
            if ((this.ValidateWebUserEbookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateWebUserEbookingCompleted(this, new ValidateWebUserEbookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/GetUserAccessSettings", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserAccessSettings(int userId) {
            object[] results = this.Invoke("GetUserAccessSettings", new object[] {
                        userId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAccessSettingsAsync(int userId) {
            this.GetUserAccessSettingsAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetUserAccessSettingsAsync(int userId, object userState) {
            if ((this.GetUserAccessSettingsOperationCompleted == null)) {
                this.GetUserAccessSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAccessSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserAccessSettings", new object[] {
                        userId}, this.GetUserAccessSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserAccessSettingsOperationCompleted(object arg) {
            if ((this.GetUserAccessSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAccessSettingsCompleted(this, new GetUserAccessSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/SearchFailedLogin", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchFailedLogin(string Signature, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> StationID, string IP, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> FromDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> ToDate, int PageIndex, int pPageSize, int pSortColumnIndex, string pSortColumn) {
            object[] results = this.Invoke("SearchFailedLogin", new object[] {
                        Signature,
                        StationID,
                        IP,
                        FromDate,
                        ToDate,
                        PageIndex,
                        pPageSize,
                        pSortColumnIndex,
                        pSortColumn});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchFailedLoginAsync(string Signature, System.Nullable<int> StationID, string IP, System.Nullable<System.DateTime> FromDate, System.Nullable<System.DateTime> ToDate, int PageIndex, int pPageSize, int pSortColumnIndex, string pSortColumn) {
            this.SearchFailedLoginAsync(Signature, StationID, IP, FromDate, ToDate, PageIndex, pPageSize, pSortColumnIndex, pSortColumn, null);
        }
        
        /// <remarks/>
        public void SearchFailedLoginAsync(string Signature, System.Nullable<int> StationID, string IP, System.Nullable<System.DateTime> FromDate, System.Nullable<System.DateTime> ToDate, int PageIndex, int pPageSize, int pSortColumnIndex, string pSortColumn, object userState) {
            if ((this.SearchFailedLoginOperationCompleted == null)) {
                this.SearchFailedLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchFailedLoginOperationCompleted);
            }
            this.InvokeAsync("SearchFailedLogin", new object[] {
                        Signature,
                        StationID,
                        IP,
                        FromDate,
                        ToDate,
                        PageIndex,
                        pPageSize,
                        pSortColumnIndex,
                        pSortColumn}, this.SearchFailedLoginOperationCompleted, userState);
        }
        
        private void OnSearchFailedLoginOperationCompleted(object arg) {
            if ((this.SearchFailedLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchFailedLoginCompleted(this, new SearchFailedLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/SearchInvalidMachines", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchInvalidMachines([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> machineTypeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> FromDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> ToDate) {
            object[] results = this.Invoke("SearchInvalidMachines", new object[] {
                        machineTypeID,
                        FromDate,
                        ToDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchInvalidMachinesAsync(System.Nullable<int> machineTypeID, System.Nullable<System.DateTime> FromDate, System.Nullable<System.DateTime> ToDate) {
            this.SearchInvalidMachinesAsync(machineTypeID, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void SearchInvalidMachinesAsync(System.Nullable<int> machineTypeID, System.Nullable<System.DateTime> FromDate, System.Nullable<System.DateTime> ToDate, object userState) {
            if ((this.SearchInvalidMachinesOperationCompleted == null)) {
                this.SearchInvalidMachinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchInvalidMachinesOperationCompleted);
            }
            this.InvokeAsync("SearchInvalidMachines", new object[] {
                        machineTypeID,
                        FromDate,
                        ToDate}, this.SearchInvalidMachinesOperationCompleted, userState);
        }
        
        private void OnSearchInvalidMachinesOperationCompleted(object arg) {
            if ((this.SearchInvalidMachinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchInvalidMachinesCompleted(this, new SearchInvalidMachinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cad.valentiatech.com/RegisterInvalidMachines", RequestNamespace="http://cad.valentiatech.com/", ResponseNamespace="http://cad.valentiatech.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterInvalidMachines(int InvalidMachineID, int userID) {
            this.Invoke("RegisterInvalidMachines", new object[] {
                        InvalidMachineID,
                        userID});
        }
        
        /// <remarks/>
        public void RegisterInvalidMachinesAsync(int InvalidMachineID, int userID) {
            this.RegisterInvalidMachinesAsync(InvalidMachineID, userID, null);
        }
        
        /// <remarks/>
        public void RegisterInvalidMachinesAsync(int InvalidMachineID, int userID, object userState) {
            if ((this.RegisterInvalidMachinesOperationCompleted == null)) {
                this.RegisterInvalidMachinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterInvalidMachinesOperationCompleted);
            }
            this.InvokeAsync("RegisterInvalidMachines", new object[] {
                        InvalidMachineID,
                        userID}, this.RegisterInvalidMachinesOperationCompleted, userState);
        }
        
        private void OnRegisterInvalidMachinesOperationCompleted(object arg) {
            if ((this.RegisterInvalidMachinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterInvalidMachinesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateUser2CompletedEventHandler(object sender, ValidateUser2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pintUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pintStationID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte[] pbytarrPicture {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pstrPicturePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsAdmin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsMachineBlocked {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public int iAttempts {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateUserAndLogInvalidEntryCompletedEventHandler(object sender, ValidateUserAndLogInvalidEntryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserAndLogInvalidEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserAndLogInvalidEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pintUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pintStationID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsAdmin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsMachineBlocked {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsSettings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int iAttempts {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateUserForAmbulanceCompletedEventHandler(object sender, ValidateUserForAmbulanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserForAmbulanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserForAmbulanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pintUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pintStationID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte[] pbytarrPicture {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pstrPicturePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsAdmin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsMachineBlocked {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string nationalId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateUserForNationalIdCompletedEventHandler(object sender, ValidateUserForNationalIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserForNationalIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserForNationalIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pintUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pintStationID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte[] pbytarrPicture {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pstrPicturePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsAdmin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsMachineBlocked {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateWebUserCompletedEventHandler(object sender, ValidateWebUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateWebUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateWebUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pintUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool pblnIsAdmin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ValidateWebUserEbookingCompletedEventHandler(object sender, ValidateWebUserEbookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateWebUserEbookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateWebUserEbookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pintUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pintRoleID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetUserAccessSettingsCompletedEventHandler(object sender, GetUserAccessSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAccessSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAccessSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SearchFailedLoginCompletedEventHandler(object sender, SearchFailedLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchFailedLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchFailedLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SearchInvalidMachinesCompletedEventHandler(object sender, SearchInvalidMachinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchInvalidMachinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchInvalidMachinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RegisterInvalidMachinesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591