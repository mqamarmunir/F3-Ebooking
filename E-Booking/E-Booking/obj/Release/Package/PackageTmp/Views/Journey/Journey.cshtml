<script src="@Url.Content("~/Scripts/knockout-3.2.0.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/knockout.mapping.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/knockout.validation.modified.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/KnockoutModels/DropdownModel.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/KnockoutModels/PatientModel.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/KnockoutModels/DestinationAddressModel.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/KnockoutModels/TransportRequirementModel.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/KnockoutModels/RiskAssessmentModel.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/KnockoutModels/SpecialistTransportRequestModel.js")" type="text/javascript"></script>
<script src="~/Scripts/KnockoutModels/CollectionAddressModel.js"></script>
<script src="~/Scripts/KnockoutModels/HomeAddressModel.js"></script>
<script src="~/Scripts/jquery.maskedinput.min.js"></script>
@*<script src="~/Scripts/jquery.mask.min.js"></script>*@
<script src="~/Scripts/Base64.js"></script>
<script type="text/javascript" src="http://ondemandapi.ordnancesurvey.co.uk/osmapapi/openspace.js?key=phefa4ur"></script>
<script type="text/javascript" src="http://openspace.ordnancesurvey.co.uk/osmapapi/script/mapbuilder/basicmap.js"></script>
<script type="text/javascript" src="http://openspace.ordnancesurvey.co.uk/osmapapi/script/mapbuilder/searchbox.js"></script>

<link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.10.7/css/jquery.dataTables.css">



<script>

    @functions{
        public string TokenHeaderValue()
        {
            string cookieToken, formToken;
            //AntiForgery.GetTokens()
            AntiForgery.GetTokens(null, out cookieToken, out formToken);

            return cookieToken + ":" + formToken;
        }
     }

    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    function WizardViewModel() {

        var self = this;
        var checkvieworedit;
        var v_nhsresult;
        var dt_table;
        var totalAddressesReturned;
        //Models Declaration
        self.Dropdown = new DropdownModel();
        self.Patient = new PatientModel();
        self.HomeAddress = new HomeAddressModel();
        self.CollectionAddress = new CollectionAddressModel();
        self.DestinationAddress = new DestinationAddressModel();
        self.TransportRequirement = new TransportRequirementModel();
        self.RiskAssessment = new RiskAssessmentModel();
        self.SpecialistTransportRequest = new SpecialistTransportRequestModel();
        self.sendEmail = ko.observable();

        self.pageOffset = 0;
        //self.TotalAddressResults;
        //Temp Variables
        self.HomeLineOneTemp = '';
        self.HomeLineTwoTemp = '';
        self.HomeLineThreeTemp = '';
        self.HomeLineFourTemp = '';
        self.HomePostCodeTemp = '';


        self.CollectionLineOneTemp = '';
        self.CollectionLineTwoTemp = '';
        self.CollectionLineThreeTemp = '';
        self.CollectionLineFourTemp = '';
        self.CollectionPostCodeTemp = '';
        self.CollectionFacilityTypeTemp = '';
        self.CollectionFacilityTemp = '';
        self.CollectionFacilityDepartmentTemp = '';

        self.DestinationLineOneTemp = '';
        self.DestinationLineTwoTemp = '';
        self.DestinationLineThreeTemp = '';
        self.DestinationLineFourTemp = '';
        self.DestinationPostCodeTemp = '';
        self.DestinationFacilityTypeTemp = '';
        self.DestinationFacilityTemp = '';
        self.DestinationFacilityDepartmentTemp = '';

        self.PatientJourneyDateTemp = '';
        self.PatientAppointmentTimeIdTemp = '';
        self.PatientActualAppointmentTimeTemp = '';
        self.PatientEstimatedAppointmentDurationIdTemp = '';

        //  ShowProgressBar();

        //Load Dropdowns From Server
        var timestart = new Date().getTime();
        var q = '@Request.Params["q"]';

        var a;
        var a1;
        var a2;
        var a3;
        var isPrivatePatient;
        //debugger;
        if (q.length < 1) {//if call is not of Update
            a = Base64.decode(getParameterByName('a').toString());
            a1 = Base64.decode(getParameterByName('a1').toString());
            a2 = Base64.decode(getParameterByName('a2').toString());
            a3 = Base64.decode(getParameterByName('a3').toString());
            isPrivatePatient = getParameterByName('PrivatePatient');
        }//if (q.length > 3) {
        //    alert('I am in Edit mode.');
        //}
        //else {
        //    alert(q.length);
        //   // alert('I am in New Journey mode');
        //}

        $.ajax({
            url: '@Url.Action("GetAllDropdowns", "Dropdown")',
            type: 'GET',
            //data: { tableNames: 'tblAppointmentTime,AppointmentDuration,Title,Relationship,FacilityType,EscortType,GPPractice,Escort,TransportReason,TransportRequirement,InfectionType' },
            contentType: "application/json; charset=utf-8",
            async: true,
            success: function (dropdownlists) {
                ko.utils.arrayForEach(dropdownlists, function (dropdowns) {
                    ko.utils.arrayForEach(dropdowns, function (dropdown) {


                        //else if (dropdown.ServiceTypeId && dropdown.ServiceTypeName)
                        //    self.Dropdown.ServiceTypes.push(new ServiceTypeModel(dropdown));
                        //else if (dropdown.AuthorisingRoleId && dropdown.AuthorisingRoleName)
                        //    self.Dropdown.AuthorisingRoles.push(new AuthorisingRoleModel(dropdown));
                        if (dropdown.TitleId && dropdown.TitleName)
                            self.Dropdown.Titles.push(new TitleModel(dropdown));
                        else if (dropdown.AppointmentTimeId && dropdown.AppointmentTimeName)
                            self.Dropdown.AppointmentTimes.push(new AppointmentTimeModel(dropdown));
                        else if (dropdown.EstimatedAppointmentDurationId && dropdown.EstimatedAppointmentDurationName)
                            self.Dropdown.EstimatedAppointmentDurations.push(new EstimatedAppointmentDurationModel(dropdown));
                        else if (dropdown.RelationshipToPatientId && dropdown.RelationshipToPatientName)
                            self.Dropdown.RelationshipToPatient.push(new RelationshipToPatientModel(dropdown));
                        else if (dropdown.FacilityId && dropdown.FacilityName && q.length > 0) {
                            //self.Dropdown.Facilities.push(new FacilityModel(dropdown));
                            self.DestinationAddress.Facilities.push(new facilitiesModel(dropdown));
                            self.CollectionAddress.Facilities.push(new facilitiesModel(dropdown));
                        }
                        else if (dropdown.DepartmentId && dropdown.DepartmentName && q.length > 0) {
                            self.CollectionAddress.FacilityDepartments.push(new facilityDepartmentsModel(dropdown));
                            self.DestinationAddress.FacilityDepartments.push(new facilityDepartmentsModel(dropdown));
                        }
                        else if (dropdown.FacilityTypeId && dropdown.FacilityTypeName)
                            self.Dropdown.FacilityTypes.push(new FacilityTypeModel(dropdown));
                        else if (dropdown.GPPracticeId && dropdown.GPPracticeName)
                            self.Dropdown.GPPractices.push(new GPPracticeModel(dropdown));
                            //else if (dropdown.PatientTypeId && dropdown.PatientTypeName)
                            //    self.Dropdown.PatientTypes.push(new PatientTypeModel(dropdown));
                            //else if (dropdown.RequestTypeId && dropdown.RequestTypeName)
                            //    self.Dropdown.RequestTypes.push(new RequestTypeModel(dropdown));
                        else if (dropdown.EscortTypeId && dropdown.EscortTypeName)
                            self.Dropdown.EscortTypes.push(new EscortTypeModel(dropdown));
                        else if (dropdown.EscortNumberId && dropdown.EscortNumberName)
                            self.Dropdown.EscortNumbers.push(new EscortNumberModel(dropdown));
                        else if (dropdown.TransportRequestReasonId && dropdown.TransportRequestReasonName)
                            self.Dropdown.TransportRequestReasons.push(new TransportRequestReasonModel(dropdown));
                        else if (dropdown.TransportSelectionId && dropdown.TransportSelectionName)
                            self.Dropdown.TransportSelections.push(new TransportSelectionModel(dropdown));
                        else if (dropdown.InfectiousId && dropdown.InfectiousName)
                            self.Dropdown.Infectious.push(new InfectiousModel(dropdown));
                    });
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                var errorMessage = '';
                $('#message').html(jqXHR.responseText);
                ShowErrorMessage();
            },
            complete: function () {
                HideProgressBar();
                var timeend = new Date().getTime();
                // alert(timeend - timestart);
            }
        });
        // HideProgressBar();
        //Validate The Steps
        RecordNotEditableOkClick = function () {
            $("#RecordNotEditableDialog").dialog("close");
            self.TransportRequirement.Is24HourAmendment(true);
            proceddtoBooking();
        }
        nhsNumberChange = function () {

            //debugger;
            //alert(self.Patient.NHSNumber());
            if (self.Patient.NHSNumber().indexOf('000 000 0000') >= 0) {
                alert('NHS number not valid');
                self.Patient.NHSNumber('');
                $('#txtPatientNHSNumber').addClass("fieldError");
            }
            @*else {
                ShowProgressBar();
                $.ajax({
                    url: '@Url.Action("SearchNHS", "JourneyWebAPI", new { httproute = "" })',
                    data: { nhsNumber: self.Patient.NHSNumber() },
                    type: 'GET',
                    headers: { 'RequestVerificationToken': '@TokenHeaderValue()' },
                    success: function (result) {
                        if (result == false) {

                            //alert('Record Not Found for Amendment/Cancellation.');
                        }
                        else {
                            v_nhsresult = result;
                            $("#PatientFoundDialog").dialog("open");
                            //ko.mapping.fromJS(result);
                            //alert(JSON.stringify(result));
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        var errorMessage = '';
                        $('#message').html(jqXHR.responseText);
                        ShowErrorMessage();
                    },
                    complete: function () {
                        HideProgressBar();
                    }
                });
            }*@
            return true;

        }
        IOWNumberChange = function () {
            //debugger;

            if (self.Patient.IsleOfWightNo().indexOf('IW000000') >= 0) {
                alert('IOW number not valid');
                self.Patient.IsleOfWightNo('');
                $('#txtPatientIsleOfWightNo').addClass("fieldError");
            }
            return true;

        }
        DataClearConfirmationDialogOkClick = function () {
            $("#DataClearConfirmationDialog").dialog("close");
            if (a.toString().length > 0) {
              
                    window.location.replace('@Url.Action("RequesterDetails", "Account", new { q = System.DateTime.Now.ToString("ddmmyy_hhmmss") + "_11" + @User.Identity.Name + "_5465424_" + @User.Identity.Name + "=="})' + '&q1=' + Base64.encode(a) + '&q2=' + Base64.encode(a1) + '&q3=' + Base64.encode(a2) + '&q4=' + Base64.encode(a3));
            }
            else {
                window.location.replace('@Url.Action("RequesterDetails", "Account", new { q = System.DateTime.Now.ToString("ddmmyy_hhmmss") + "_11" + @User.Identity.Name + "_5465424_" + @User.Identity.Name + "=="})');
            }
        }

        DataClearConfirmationDialogCancelClick = function () {
            $("#DataClearConfirmationDialog").dialog("close");
        }
        PatientFoundDialogOkClick = function () {
            $("#PatientFoundDialog").dialog("close");
            //alert(v_nhsresult.Patient.BirthDate);
            self.Patient.IsleOfWightNo(v_nhsresult.Patient.IsleOfWightNo);

            self.Patient.GenderTitleId(v_nhsresult.Patient.GenderTitleId);
            self.Patient.FirstName(v_nhsresult.Patient.FirstName);
            self.Patient.Surname(v_nhsresult.Patient.Surname);
            self.Patient.BirthDate(v_nhsresult.Patient.BirthDate);
            $("#txtPatienBirthtDate").datepicker("setDate", getDate(v_nhsresult.Patient.BirthDate));
            //self.Patient.BirthDate(v_nhsresult.Patient.BirthDate);
            self.Patient.NameOfGP(v_nhsresult.Patient.NameOfGP);
            self.HomeAddress.IsNoFixAbode(v_nhsresult.HomeAddress.IsNoFixAbode);
            self.HomeAddress.LineOne(v_nhsresult.HomeAddress.LineOne);
            self.HomeAddress.LineTwo(v_nhsresult.HomeAddress.LineTwo);
            self.HomeAddress.LineThree(v_nhsresult.HomeAddress.LineThree);
            self.HomeAddress.LineFour(v_nhsresult.HomeAddress.LineFour);
            self.HomeAddress.Easting(v_nhsresult.HomeAddress.Easting);
            self.HomeAddress.Northing(v_nhsresult.HomeAddress.Northing);
            self.HomeAddress.PostCode(v_nhsresult.HomeAddress.PostCode);
            self.HomeAddress.ContactTelNo(v_nhsresult.HomeAddress.ContactTelNo);
            self.HomeAddress.AlternateContactTelNo(v_nhsresult.HomeAddress.AlternateContactTelNo);
            self.HomeAddress.RelationshipId(v_nhsresult.HomeAddress.RelationshipId);
            $("#txtLastRecordedPatientPatientWeight").focus();
            $("#txtLastRecordedPatientPatientWeight").select();
        }
        datefromkeyboard = function (data, event, calledFrom) {
            //debugger;
            //if (self.Patient.JourneyDate().length>0)
            //{
            var keyCode = event.keyCode;//|| event.which;
            // debugger;
            if (keyCode != 9 && !(keyCode >= 48 && keyCode <= 57)) {
                if (calledFrom == 'JourneyDate') {
                    self.Patient.JourneyDate('');
                }
                else if (calledFrom == 'BirthDate') {
                    self.Patient.BirthDate('');
                }
                else if (calledFrom == 'WeightDate') {
                    self.Patient.WeighingDate('');
                }
                else {
                    self.Patient.JourneyDate2('');
                }
            }
            return true;


            //e.cancelBubble = true;
            //if (e.stopPropagation)
            //    e.stopPropagation();
            //return false;
        }
        chkManualHandlingYes = function () {
            if (self.RiskAssessment.IsManualHandlingProfileCarriedOutYes()) {
                self.RiskAssessment.IsManualHandlingProfileCarriedOutNo(false);
                self.RiskAssessment.IsManualHandlingProfileCarriedOutYes(true);
            }
            else
                self.RiskAssessment.IsManualHandlingProfileCarriedOutYes(false);
            return true;
        }
        chkManualHandlingNo = function () {
            if (self.RiskAssessment.IsManualHandlingProfileCarriedOutNo()) {
                self.RiskAssessment.IsManualHandlingProfileCarriedOutYes(false);
                self.RiskAssessment.IsManualHandlingProfileCarriedOutNo(true);
            }
            else
                self.RiskAssessment.IsManualHandlingProfileCarriedOutNo(false);
            return true;
        }
        self.ValidateViewModel = function (wizardStep) {
            //debugger;
            var isViewModelValid = true;
            //We have both models on single step so need to validate both
            if (wizardStep == 0) {
                isViewModelValid = (IsValidKnockoutModel(self.Patient) && IsValidKnockoutModel(self.HomeAddress) && IsValidKnockoutModel(self.CollectionAddress) && IsValidKnockoutModel(self.DestinationAddress));
                if (self.Patient.IsRiskAssessmentRequired() == true && IsValidKnockoutModel(self.RiskAssessment) == false) {
                    isViewModelValid = false;
                    $("#wizard").steps("setStep", 3);

                }


            }
            else if (wizardStep == 1) {
                isViewModelValid = IsValidKnockoutModel(self.TransportRequirement);
                if (self.TransportRequirement.TransportRequestReasonId() == 5 && IsValidKnockoutModel(self.SpecialistTransportRequest) == false) {
                    isViewModelValid = false;
                    $("#wizard").steps("setStep", 4);
                }
            }
            else if (wizardStep == 3) {
                //alert(self.RiskAssessment);
                isViewModelValid = IsValidKnockoutModel(self.RiskAssessment);
            }
            else if (wizardStep == 4) {
                isViewModelValid = IsValidKnockoutModel(self.SpecialistTransportRequest);
            }
            if (!isViewModelValid) {
                //alert($('.fieldError:visible').first().attr("id"));
                //$(document).scrollTop(3561);
                // $(document).scrollTop($('.fieldError:visible').first().offset().top);
                $("html, body").animate({ scrollTop: $('.fieldError:visible').first().offset().top }, 600);
            }
            else {

                $("html, body").animate({ scrollTop: 0 }, 50);
            }
            return isViewModelValid;
        };


        IsComplexAllowed = function () {
            //debugger;
            if (q.length < 1 && self.TransportRequirement.TransportRequestReasonId() == '4') {
                return true;
            }
            else {
                return false;
            }
        }

        self.ConfirmBooking = function () {
            
            debugger;
            if (self.Patient.ComplexJourney() && $("#txtPatientJourneyDate2").val().length == 0) {
                $("#txtPatientJourneyDate2").addClass('fieldError');
                HideProgressBar();
                return false;
            }
            if (q.length < 1) {
                self.Patient.RequesterSubjectiveCode(a);
                self.Patient.RequesterCostCenter(a1);
                self.Patient.RequesterAuthorizingClinician(a2);
                self.Patient.RequesterAuthorizingRoleId(a3);
                self.Patient.isPrivatePatient(isPrivatePatient);
            }

            var journeyDate = new Date(self.Patient.JourneyDateBeforeUpdate());
            // alert(journeyDate);
            var datenow = new Date();
            //alert(datenow - appointmentDateTime);
            var diffinhours = (journeyDate - datenow) / 1000 / 60 / 60;

            if (diffinhours < 24) {
                $("#RecordNotEditableDialog").dialog("open");
                //$("#ReferenceNumberSearchDialog").dialog("close");
                //self.Patient.BookingNo(result.Patient.BookingNo);
                //self.Patient.FirstName(result.Patient.FirstName);
                //self.Patient.Surname(result.Patient.Surname);
                ////alert('The changes are accepted in Booked Journeys atleast before 24 hours of Journey Date. No changes could be made online after that.');
                //$("#ReferenceNumberSearchDialog input").val('');

                // return;
            }
            else {
                proceddtoBooking();
            }
            //debugger;
            //alert(getDate(self.Patient.JourneyDate()));
            //            var JourneyDateoffset=getDate(self.patient.JourneyDate)
            //alert(self.Patient.JourneyDate());
           

        }

        proceddtoBooking = function () {
            debugger;
            ShowProgressBar();
            try {
                self.Patient.JourneyDate(self.Patient.JourneyDate().toDateString());
            }
            catch (E) { }
            try {
                self.Patient.BirthDate(self.Patient.BirthDate().toDateString());
            }
            catch (E) { }
            try {
                if (typeof self.Patient.WeighingDate() != 'undefined' && self.Patient.WeighingDate() != 'undefined' && self.Patient.WeighingDate() != '')
                    self.Patient.WeighingDate(self.Patient.WeighingDate().toDateString());
            }
            catch (E) { }
            if (typeof a != 'undefined') {
                //if (!self.Patient.IsMainlandRepatriation() && typeof self.Patient.JourneyDate()!='undefined') {
                //    //alert(self.Patient.JourneyDate());
                //    self.Patient.JourneyDate(self.Patient.JourneyDate().toDateString());
                //}
                //self.Patient.BirthDate(self.Patient.BirthDate().toDateString());
                //self.Patient.WeighingDate(self.Patient.WeighingDate().toDateString());
                if (self.Patient.ComplexJourney()) {
                    self.Patient.JourneyDate2(self.Patient.JourneyDate2().toDateString());
                }
            }
            var theData = {
                Patient: self.Patient,
                HomeAddress: self.HomeAddress,
                CollectionAddress: self.CollectionAddress,
                DestinationAddress: self.DestinationAddress,
                TransportRequirement: self.TransportRequirement,
                RiskAssessment: self.RiskAssessment,
                SpecialistTransportRequest: self.SpecialistTransportRequest
            }

            

            //var checkis24Houramendment = '0';
            //try {

            //    checkis24Houramendment = getParameterByName('q1').split('_', 2)[1];// 'Request.Params["q1"].ToString().Split(new char[]{'_'})[0]';


            //}
            //catch (E) {
            //    checkis24Houramendment = '0';
            //}
            //if (checkis24Houramendment == '1') {
            //    self.TransportRequirement.Is24HourAmendment(true);

            //}
            //else {
            //    self.TransportRequirement.Is24HourAmendment(false);
            //}


            ////var xxx=TokenHeaderValue().ToString();
            //// debugger;
            ////alert(JSON.stringify(theData.HomeAddress));
            ////alert('TokenHeaderValue()');
            ////alert(JSON.stringify(theData.TransportRequirement));
            $.ajax({

                url: '@Url.Action("", "JourneyWebAPI", new { httproute = "" })',

                contentType: "application/json;charset=utf-8",//application/json

                type: "POST",

                data: ko.toJSON(theData),
               
                headers: { 'RequestVerificationToken': '@TokenHeaderValue()' },

                beforeSend: function (xhr) {
                    //xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
                },

                success: function (result) {
                    debugger;
                    //alert(JSON.stringify(result));
                    //$("#EBookingCompleteDialog").dialog("open");
                    self.TransportRequirement.Id(result.refNum);
                    self.Patient.BookingNo(result.BookingNo);
                    $("#txtReferenceBookingNumber").val(result.BookingNo);
                    $("#NewJourneyAcceptanceDialog").dialog("open");

                    HideProgressBar();
                    if (self.sendEmail() == true) {
                        //alert('Send EMail Called');
                        SendEmailToUser(@User.Identity.Name);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    debugger;
                    var errorMessage = '';
                   // var result = $('<div />').append(jqXHR.responseText).find('#message').html();
                  //  $('#message').html(result);
                   // $('#message').html('<div>'+jqXHR.responseText+'</div>');
                    $('.erriText').html(jQuery.parseJSON(jqXHR.responseText).Message);
                    HideProgressBar();
                    ShowErrorMessage();
                },
                complete: function () {
                }
            });
        }
        self.NoneofAboveCheckedChange = function () {
            if (self.TransportRequirement.IsNoneOfAbove()) {

                self.TransportRequirement.IsInfectious(false);
                self.TransportRequirement.InfectiousId();
                self.TransportRequirement.IsTravellingWithOwnOxygen(false);
                self.TransportRequirement.IsEscortTravelling(false);
                self.TransportRequirement.EscortTypeId();
                self.TransportRequirement.EscortNumberId();
                self.TransportRequirement.IsBariatric(false);
                self.TransportRequirement.IsElectricWheelchair(false);
                self.TransportRequirement.IsFullLegPlasterPOP(false);
                self.TransportRequirement.IsWheelchairAndLegExtension(false);
                self.TransportRequirement.IsWaterlow(false);
                self.TransportRequirement.IsDNACPR(false);
                self.TransportRequirement.IsDiabetic(false);
                self.TransportRequirement.IsNuclearMedicineRadioActiveRisk(false);

                return true;
            }
            else {
                //alert('I am in else');

                return true;
            }
        }
        self.InfectionsCheckedChange = function () {
            if (self.TransportRequirement.IsNoneOfAbove()) {
                for (var key in self.TransportRequirement) {
                    //alert(key.toString().toLowerCase().indexOf("is"));
                    if (key.toString().toLowerCase().indexOf("is") > -1 && ko.isObservable(self.TransportRequirement[key]) && key != 'IsNoneOfAbove') {
                        //alert(key);
                        self.TransportRequirement[key](false);
                    }
                }
                return false;
            } else
                return true;
        }



        self.MakeAnotherBookingClick = function () {
            window.location.replace('@Url.Action("Index", "Journey")');
            @*if (typeof a != 'undefined') {
                if (a.toString().length > 0) {
                    window.location.replace('@Url.Action("RequesterDetails", "Account", new { q = System.DateTime.Now.ToString("ddmmyy_hhmmss") + "_11" + @User.Identity.Name + "_5465424_" + @User.Identity.Name + "=="})' + '&q1=' + Base64.encode(a) + '&q2=' + Base64.encode(a1) + '&q3=' + Base64.encode(a2) + '&q4=' + Base64.encode(a3));
                }
                else {
                    window.location.replace('@Url.Action("RequesterDetails", "Account", new { q = System.DateTime.Now.ToString("ddmmyy_hhmmss") + "_11" + @User.Identity.Name + "_5465424_" + @User.Identity.Name + "=="})');
                }
            }
            else {
                window.location.replace('@Url.Action("Index", "Journey")');
            }*@


        }
        self.goToRequesterpage = function () {
            debugger;
            if (typeof a != 'undefined') {
                $("#DataClearConfirmationDialog").dialog("open");
            }
            else {
                window.location.replace('@Url.Action("Index", "Journey")');
            }
        }
        
        ConformBookingAcceptanceClick = function () {
            $("#NewJourneyAcceptanceDialog").dialog("close");
            $("#EBookingCompleteDialog").dialog("open");
            //debugger;
            $("#EBookingCompleteDialog").focus();
            $("#EBookingCompleteDialog, #dimBg1").show();
        }

        AppointmentDateTimeChange = function () {
            //debugger;
            //alert($('#ddlPatientAppointmentTime option:selected').text());
            if ($('#ddlPatientAppointmentTime option:selected').text().indexOf('Immediate') >= 0) {
                var currdate = new Date();
                var AddDay = 0;
                if (currdate.getHours() == 23) {
                    AddDay = 86400000;
                }
                var _journeyDate = new Date(currdate.getTime() + AddDay);
                //alert(_journeyDate);
                self.Patient.JourneyDate(_journeyDate);
                // var ROUNDING = 30 * 60 * 1000; /*ms*/

                //var yyy = new Date(Math.ceil((+currdate) / ROUNDING) * ROUNDING);
                //alert(yyy);
                var xxx;
                if (AddDay > 0) {
                    xxx = '00:' + pad(currdate.getMinutes(), 2);
                }
                else {
                    xxx = pad((currdate.getHours() + 1).toString(), 2) + ':' + pad(currdate.getMinutes(), 2);
                }//alert(xxx);
                self.Patient.ActualAppointmentTime(xxx);
            }
            if (self.Patient.JourneyDate() && self.Patient.AppointmentTimeId()) {
                //alert(getDate(self.Patient.JourneyDate()));
                var appointmentDateTime = $("#txtPatientJourneyDate").datepicker('getDate').setHours(self.Patient.AppointmentTimeId());
                //alert(appointmentDateTime);

                if (((appointmentDateTime - (new Date)) / 36e5) < 24)
                    $("#AppointmentDateTimeAcceptanceDialog").dialog("open");
            }


        }
        function pad(str, max) {
            str = str.toString();
            return str.length < max ? pad("0" + str, max) : str;
        }

        CollectionAddresseIsThisPatientHomeAddressChange = function () {
            //debugger;
            if (self.DestinationAddress.IsThisPatientHomeAddress() || self.HomeAddress.IsNoFixAbode()) {
                self.CollectionAddress.IsThisPatientHomeAddress(false);
                return false;
            }
            if (self.CollectionAddress.IsThisPatientHomeAddress()) {

                self.CollectionLineOneTemp = self.CollectionAddress.LineOne();
                self.CollectionLineTwoTemp = self.CollectionAddress.LineTwo();
                self.CollectionLineThreeTemp = self.CollectionAddress.LineThree();
                self.CollectionLineFourTemp = self.CollectionAddress.LineFour();
                self.CollectionPostCodeTemp = self.CollectionAddress.PostCode();
                self.CollectionFacilityTypeTemp = self.CollectionAddress.FacilityTypeId();
                self.CollectionFacilityTemp = self.CollectionAddress.FacilityId();
                self.CollectionFacilityDepartmentTemp = self.CollectionAddress.DepartmentId();
                self.CollectionAddress.FacilityTypeId('');
                self.CollectionAddress.FacilityId('');
                self.CollectionAddress.DepartmentId('');
                $("#ddlCollectionAddressFacilityType").prop("disabled", true);
                $("#ddlCollectionAddressFacility").prop("disabled", true);
                $("#ddlCollectionAddressDepartment").prop("disabled", true);


                self.CollectionAddress.LineOne(self.HomeAddress.LineOne());
                self.CollectionAddress.LineTwo(self.HomeAddress.LineTwo());
                self.CollectionAddress.LineThree(self.HomeAddress.LineThree());
                self.CollectionAddress.LineFour(self.HomeAddress.LineFour());
                self.CollectionAddress.PostCode(self.HomeAddress.PostCode());
                self.CollectionAddress.UPRN(self.HomeAddress.UPRN());
                self.CollectionAddress.Easting(self.HomeAddress.Easting());
                self.CollectionAddress.Northing(self.HomeAddress.Northing());


            }
            else {
                self.CollectionAddress.LineOne(self.CollectionLineOneTemp);
                self.CollectionAddress.LineTwo(self.CollectionLineTwoTemp);
                self.CollectionAddress.LineThree(self.CollectionLineThreeTemp);
                self.CollectionAddress.LineFour(self.CollectionLineFourTemp);
                self.CollectionAddress.PostCode(self.CollectionPostCodeTemp);
                self.CollectionAddress.FacilityTypeId(self.CollectionFacilityTypeTemp);
                self.CollectionAddress.FacilityId(self.CollectionFacilityTemp);
                self.CollectionAddress.DepartmentId(self.CollectionFacilityDepartmentTemp);
                $("#ddlCollectionAddressFacilityType").prop("disabled", false);
                $("#ddlCollectionAddressFacility").prop("disabled", false);
                $("#ddlCollectionAddressDepartment").prop("disabled", false);

            }

            return true;
        }

        DestinationAddresseIsThisPatientHomeAddressChange = function () {
            if (self.CollectionAddress.IsThisPatientHomeAddress() || self.HomeAddress.IsNoFixAbode()) {
                self.DestinationAddress.IsThisPatientHomeAddress(false);
                return false;
            }
            if (self.DestinationAddress.IsThisPatientHomeAddress()) {

                self.DestinationLineOneTemp = self.DestinationAddress.LineOne();
                self.DestinationLineTwoTemp = self.DestinationAddress.LineTwo();
                self.DestinationLineThreeTemp = self.DestinationAddress.LineThree();
                self.DestinationLineFourTemp = self.DestinationAddress.LineFour();
                self.DestinationPostCodeTemp = self.DestinationAddress.PostCode();
                self.DestinationFacilityTypeTemp = self.DestinationAddress.FacilityTypeId();
                self.DestinationFacilityTemp = self.DestinationAddress.FacilityId();
                self.DestinationFacilityDepartmentTemp = self.DestinationAddress.DepartmentId();
                self.DestinationAddress.FacilityTypeId('');
                self.DestinationAddress.FacilityId('');
                self.DestinationAddress.DepartmentId('');
                $("#ddlDestinationAddressFacilityType").prop("disabled", true);
                $("#ddlDestinationAddressFacility").prop("disabled", true);
                $("#ddlDestinationAddressDepartment").prop("disabled", true);

                self.DestinationAddress.LineOne(self.HomeAddress.LineOne());
                self.DestinationAddress.LineTwo(self.HomeAddress.LineTwo());
                self.DestinationAddress.LineThree(self.HomeAddress.LineThree());
                self.DestinationAddress.LineFour(self.HomeAddress.LineFour());
                self.DestinationAddress.PostCode(self.HomeAddress.PostCode());
                self.DestinationAddress.UPRN(self.HomeAddress.UPRN());
                self.DestinationAddress.Easting(self.HomeAddress.Easting());
                self.DestinationAddress.Northing(self.HomeAddress.Northing());
            }
            else {
                self.DestinationAddress.LineOne(self.DestinationLineOneTemp);
                self.DestinationAddress.LineTwo(self.DestinationLineTwoTemp);
                self.DestinationAddress.LineThree(self.DestinationLineThreeTemp);
                self.DestinationAddress.LineFour(self.DestinationLineFourTemp);
                self.DestinationAddress.PostCode(self.DestinationPostCodeTemp);
                self.DestinationAddress.FacilityTypeId(self.DestinationFacilityTypeTemp);
                self.DestinationAddress.FacilityId(self.DestinationFacilityTemp);
                self.DestinationAddress.DepartmentId(self.DestinationFacilityDepartmentTemp);
                $("#ddlDestinationAddressFacilityType").prop("disabled", false);
                $("#ddlDestinationAddressFacility").prop("disabled", false);
                $("#ddlDestinationAddressDepartment").prop("disabled", false);

            }

            return true;
        }

        HomeAddressIsNoFixAbodeChange = function () {
            if (self.HomeAddress.IsNoFixAbode()) {
                //alert(self.HomeAddress.IsNoFixAbode());
                self.HomeLineOneTemp = self.DestinationAddress.LineOne();
                self.HomeLineTwoTemp = self.DestinationAddress.LineTwo();
                self.HomeLineThreeTemp = self.DestinationAddress.LineThree();
                self.HomeLineFourTemp = self.DestinationAddress.LineFour();
                self.HomePostCodeTemp = self.DestinationAddress.PostCode();

                self.HomeAddress.LineOne('no fixed abode');
                self.HomeAddress.LineTwo('no fixed abode');
                self.HomeAddress.LineThree('no fixed abode');
                self.HomeAddress.LineFour('no fixed abode');
                self.HomeAddress.PostCode('no fixed abode');
            }
            else {
                // alert(self.HomeAddress.IsNoFixAbode());
                self.HomeAddress.LineOne(self.HomeLineOneTemp);
                self.HomeAddress.LineTwo(self.HomeLineTwoTemp);
                self.HomeAddress.LineThree(self.HomeLineThreeTemp);
                self.HomeAddress.LineFour(self.HomeLineFourTemp);
                self.HomeAddress.PostCode(self.HomePostCodeTemp);

                self.HomeAddress.IsNoFixAbode(false);

            }

            return true;
        }

        TransportRequestReasonChange = function () {
            if (self.TransportRequirement.TransportRequestReasonId() == 5)
                $("#wizard").steps("setStep", 4);
        }

        PatientIsRiskAssessmentRequiredChange = function () {
            if (self.Patient.IsRiskAssessmentRequired()) {
                $("#txtPatientActualAppointmentTime").css({ 'background-color': '#DFD8D1' });
                $("#ddlPatientAppointmentTime").css({ 'background-color': '#DFD8D1' });
                $("#txtPatientJourneyDate").css({ 'background-color': '#DFD8D1' });
                $("#ddlPatientEstimatedAppointmentDuration").css({ 'background-color': '#DFD8D1' });
                $("#PatientIsRiskAssessmentRequiredConfirmationDialog").dialog("open");
            }
            else {
                $("#txtPatientActualAppointmentTime").css({ 'background-color': '#fff' });
                $("#ddlPatientAppointmentTime").css({ 'background-color': '#fff' });
                $("#txtPatientJourneyDate").css({ 'background-color': '#fff' });
                $("#ddlPatientEstimatedAppointmentDuration").css({ 'background-color': '#fff' });
                $("#PatientIsRiskAssessmentRequiredNonConfirmationDialog").dialog("open");
            }

            return true;
        }

        TransportSelectionChange = function () {
            if (self.TransportRequirement.TransportSelectionId())
                $("#TransportSelectionConfirmationDialog").dialog("open");
        }

        self.ClickArea = "";
        self.Confirmable = false;

        LoadOSSearch = function (area) {
            ResetMapAddress();
            self.ClickArea = area;
            if (area == "HomeAddress") {
                if ($("#chkHomeAddressIsNoFixAbobe").attr("value") == "true")
                    return false;
            }
            else if (area == "CollectionAddress") {
                if ($("#chkCollectionAddressIsThisPatientHomeAddress").attr("value") == "true")
                    return false;
            }
            else if (area == "DestinationAddress") {
                if ($("#chkDestinationAddressIsThisPatientHomeAddress").attr("value") == "true")
                    return false;
            }
            $("#textSearch").focus();
            $("#searchPlaces, #dimBg").show();
        }

        HideOSSearch = function (e) {
            ResetMapAddress();
            $("#searchPlaces").css("left", ((parseInt($(window).width()) / 2) - (parseInt($("#searchPlaces").css("width")) / 2)));
            $("#searchPlaces, #dimBg").hide();
        }


        self.addresses = null;
        OSAddressResultsPageNext_Click = function () {
            //debugger;
            if (self.pageOffset < parseInt(totalAddressesReturned / 100)) {
                self.pageOffset++;
                GetAndBindOSSearchResults();
            }
        }
        OSAddressResultsPagePrevious_Click = function () {
            if (parseInt(self.pageOffset) > 0){
                self.pageOffset--;
                GetAndBindOSSearchResults();
            }
           
        }
        OSAddressResultsPageFirst_Click = function () {
            if (parseInt(self.pageOffset) > 0) {
                self.pageOffset = 0;
                GetAndBindOSSearchResults();
            }
        }
        OSAddressResultsPageSearch_Click = function () {
            
                self.pageOffset = 0;
                GetAndBindOSSearchResults();
            
        }
        OSAddressResultsPageLast_Click = function () {
            //debugger;
            
            self.pageOffset = parseInt(totalAddressesReturned / 100);
            //alert(self.pageOffset)
            GetAndBindOSSearchResults();
        }
        //isRowsCountGreaterthanZero = function () {
        //    alert($("#tblSearchResults tbody tr").length);
        //    if ($("#tblSearchResults tbody tr").length > 0)
        //        return true;
        //    else
        //        return false;
        //}
        GetAndBindOSSearchResults = function () {
            ResetMapAddress();

            if ($.trim($("#textSearch").val()) == "") {
                $("#textSearch").addClass("fieldError");
                return;
            }
            //alert(self.pageOffset);
            var offsetvalue = parseInt(parseInt(self.pageOffset) * 100) + (self.pageOffset == 0 ? 0 : 1);
            //alert(offsetvalue);
             debugger;
            var apikeyfromconfig = '@System.Configuration.ConfigurationManager.AppSettings["addressapikey"].ToString()';
            var theURL = "https://api.ordnancesurvey.co.uk/places/v1/addresses/find?key=" + apikeyfromconfig + "&query=" + $.trim($("#textSearch").val()) + "&dataset=LPI,DPA&format=json&maxresults=100&offset=" + offsetvalue;//85DElGPwhNsD8C964z5Ps4ZXXATOkwOb
            //console.log(theURL);
            $(".recordNotFound").text("Loading Addresses...").show();

            $.ajax({
                url: theURL,
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //alert(data.header.totalresults);
                    totalAddressesReturned = data.header.totalresults;
                    if (data != null && data.results != null) {
                        $("#tblResultsFooter").show();
                        $(".recordNotFound").text("").hide();
                        if (data.results.length != 0) {
                            debugger;
                            var objAddress;

                            for (var i in data.results) {
                                //if (JSON.stringify(data.results[i]).indexOf("LPI") >= 0) {
                                //    objAddress = data.results[i].LPI;
                                //} else {
                                //    objAddress = data.results[i].DPA;
                                //}
                                //    //alert(JSON.stringify(objAddress));
                                //var address = objAddress.ADDRESS.split(',');
                                //var address1 = address[0];
                                //var address2 = address[1];
                                //var address3 = address[2];
                                //var address4 = address[3];
                                //addPanelInSearchResults(address1, address2, address3, address4, objAddress.POSTCODE, objAddress.X_COORDINATE,objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);
                                try {
                                    if (JSON.stringify(data.results[i]).indexOf("LPI") >= 0) {
                                        objAddress = data.results[i].LPI;

                                        var address1 = "";

                                        if (objAddress.SAO_TEXT != undefined && objAddress.ORGANISATION != undefined && objAddress.SAO_TEXT == objAddress.ORGANISATION) {
                                            address1 = address1 + ConcateAddress(objAddress.ORGANISATION);
                                        }
                                        else if (objAddress.PAO_TEXT != undefined && objAddress.ORGANISATION != undefined && objAddress.PAO_TEXT == objAddress.ORGANISATION) {
                                            address1 = address1 + ConcateAddress(objAddress.ORGANISATION);
                                        }
                                        else {
                                            address1 = address1 + ConcateAddress(objAddress.ORGANISATION);
                                            address1 = address1 + ConcateAddress(objAddress.SAO_TEXT);
                                            address1 = address1 + ConcateAddress(objAddress.PAO_TEXT);
                                        }

                                        if (objAddress.SAO_START_NUMBER != undefined && objAddress.SAO_END_NUMBER == undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.SAO_START_NUMBER + (objAddress.SAO_START_SUFFIX == undefined ? "" : objAddress.SAO_START_SUFFIX));
                                        }

                                        if (objAddress.SAO_START_NUMBER != undefined && objAddress.SAO_END_NUMBER != undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.SAO_START_NUMBER + (objAddress.SAO_START_SUFFIX == undefined ? "" : objAddress.SAO_START_SUFFIX) + "-" + objAddress.SAO_END_NUMBER + (objAddress.SAO_END_SUFFIX == undefined ? "" : objAddress.SAO_END_SUFFIX));
                                        }

                                        if (objAddress.PAO_START_NUMBER != undefined && objAddress.PAO_END_NUMBER == undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.PAO_START_NUMBER + (objAddress.PAO_START_SUFFIX == undefined ? "" : objAddress.PAO_START_SUFFIX));
                                        }

                                        if (objAddress.PAO_START_NUMBER != undefined && objAddress.PAO_END_NUMBER != undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.PAO_START_NUMBER + (objAddress.PAO_START_SUFFIX == undefined ? "" : objAddress.PAO_START_SUFFIX) + "-" + objAddress.PAO_END_NUMBER + (objAddress.PAO_END_SUFFIX == undefined ? "" : objAddress.PAO_END_SUFFIX));
                                        }

                                        address1 = $.trim(address1.length == 0 ? "" : address1.substr(0, (address1.length - 1)));

                                        var address2 = "";

                                        address2 = address2 + ConcateAddress(objAddress.STREET_DESCRIPTION);
                                        address2 = address2 + ConcateAddress(objAddress.LOCALITY_NAME);

                                        address2 = $.trim(address2.length == 0 ? "" : address2.substr(0, (address2.length - 1)));
                                        //alert(objAddress.UPRN);
                                        addPanelInSearchResults(address1, address2, objAddress.TOWN_NAME, objAddress.ADMINISTRATIVE_AREA, objAddress.POSTCODE_LOCATOR, objAddress.X_COORDINATE, objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);
                                    }
                                    else {
                                        objAddress = data.results[i].DPA;

                                        var address1 = "";
                                        if (objAddress.PO_BOX_NUMBER != undefined) {
                                            address1 = address1 + "PO BOX " + ConcateAddress(objAddress.PO_BOX_NUMBER);
                                        }
                                        if (objAddress.ORGANISATION_NAME != undefined) {
                                            address1 = address1 +ConcateAddress(objAddress.ORGANISATION_NAME);
                                        }
                                        if (objAddress.DEPARTMENT_NAME != undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.DEPARTMENT_NAME);
                                        }
                                        if (objAddress.SUB_BUILDING_NAME != undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.SUB_BUILDING_NAME);
                                        }
                                        if (objAddress.BUILDING_NAME != undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.BUILDING_NAME);
                                        }

                                       
                                        if (objAddress.BUILDING_NUMBER != undefined) {
                                            address1 = address1 + ConcateAddress(objAddress.BUILDING_NUMBER);
                                        }
                                        address1 = $.trim(address1.length == 0 ? "" : address1.substr(0, (address1.length - 1)));

                                        var address2 = "";

                                        if (objAddress.DEPENDENT_THOROUGHFARE_NAME != undefined) {
                                            address2 = address2 + ConcateAddress(objAddress.DEPENDENT_THOROUGHFARE_NAME);
                                        }
                                        if (objAddress.THOROUGHFARE_NAME != undefined) {
                                            address2 = address2 + ConcateAddress(objAddress.THOROUGHFARE_NAME);
                                        }
                                        if (objAddress.DOUBLE_DEPENDENT_LOCALITY != undefined) {
                                            address2 = address2 + ConcateAddress(objAddress.DOUBLE_DEPENDENT_LOCALITY);
                                        }
                                        if (objAddress.DEPENDENT_LOCALITY != undefined) {
                                            address2 = address2 + ConcateAddress(objAddress.DEPENDENT_LOCALITY);
                                        }
                                       // address2 = address2 + ConcateAddress(objAddress.STREET_DESCRIPTION);
                                        //address2 = address2 + ConcateAddress(objAddress.LOCALITY_NAME);

                                        address2 = $.trim(address2.length == 0 ? "" : address2.substr(0, (address2.length - 1)));
                                        addPanelInSearchResults(address1, address2, objAddress.POST_TOWN, objAddress.POST_TOWN, objAddress.POSTCODE, objAddress.X_COORDINATE, objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);

                                    }
                                }
                                catch (E) {
                                    //debugger;
                                    //objAddress = data.results[i].DPA;
                                    //var address = objAddress.ADDRESS.split(',');
                                    //var address1 = address[0];
                                    //var address2 = address[1];
                                    //var address3=address[2];
                                    //var address4=address[3];

                                    //addPanelInSearchResults(address1, address2, address3, address4, objAddress.POSTCODE, objAddress.X_COORDINATE,objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);

                                }
                            }


                        }
                    }
                    else {
                        $(".recordNotFound").text("Address Not Found. Please Try Another Address.").show();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errorMessage = '';
                    $('#message').html(jqXHR.responseText);
                },
                complete: function () {
                    //alert("Showing " + (parseInt(parseInt(self.pageOffset) * 100) + self.pageOffset == 0 ? 1 : 0).toString() + "-" + (parseInt(parseInt(self.pageOffset) * 100) + 100).toString() + " of xxxxxx Results.");
                    //alert((parseInt(parseInt(self.pageOffset) * 100) + 1).toString());
                    $("#divResultscounter label").text("Showing " + (parseInt(parseInt(self.pageOffset) * 100) + 1).toString() + "-" + ((parseInt(parseInt(self.pageOffset) * 100) + 100) > parseInt(totalAddressesReturned) ? totalAddressesReturned : (parseInt(parseInt(self.pageOffset) * 100) + 100)).toString() + " of " + totalAddressesReturned.toString() + " Results.");
                    //dt_table= $("#tblSearchResults").DataTable({
                    //    "paging": false,
                    //    "ordering": false,
                    //    "info": false
                        
                    //});
                    //$("#tblSearchResults_length").prop("visible",false);
                }
            });
        }
       
        @*$(".searchResults").scroll(function () {
            //alert($(".searchResults").scrollTop() + $(".searchResults").height());
            //alert($(document).height());
            console.log($('.searchResults').prop('scrollHeight'));
           // console.log('left side ' + parseInt(parseInt($(".searchResults").scrollTop()) + parseInt($(".searchResults").height())).toString());
            if ($(".searchResults").scrollTop() + $(".searchResults").height() > $(".searchResults").prop('scrollHeight') - 200) {
                //alert("near bottom!");
                lazyloading_getNextPage();
            }
        });

        lazyloading_getNextPage = function () {
            if (self.pageOffset < parseInt(totalAddressesReturned / 100)) {
                self.pageOffset++;
                GetAndBindOSSearchResultswithoutReset();
            }
        }

        GetAndBindOSSearchResultswithoutReset = function () {

            if ($.trim($("#textSearch").val()) == "") {
                $("#textSearch").addClass("fieldError");
                return;
            }
            //alert(self.pageOffset);
            var offsetvalue = parseInt(parseInt(self.pageOffset) * 100) + (self.pageOffset == 0 ? 0 : 1);
            //alert(offsetvalue);
            // debugger;
            var apikeyfromconfig = '@System.Configuration.ConfigurationManager.AppSettings["addressapikey"].ToString()';
            var theURL = "https://api.ordnancesurvey.co.uk/places/v1/addresses/find?key=" + apikeyfromconfig + "&query=" + $.trim($("#textSearch").val()) + "&dataset=LPI&format=json&maxresults=100&offset=" + offsetvalue;//85DElGPwhNsD8C964z5Ps4ZXXATOkwOb
            //console.log(theURL);
            $(".recordNotFound").text("Loading Addresses...").show();

            $.ajax({
                url: theURL,
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //alert(data.header.totalresults);
                    totalAddressesReturned = data.header.totalresults;
                    if (data != null && data.results != null) {
                        $("#tblResultsFooter").show();
                        $(".recordNotFound").text("").hide();
                        if (data.results.length != 0) {
                            debugger;
                            var objAddress;

                            for (var i in data.results) {
                                //if (JSON.stringify(data.results[i]).indexOf("LPI") >= 0) {
                                //    objAddress = data.results[i].LPI;
                                //} else {
                                //    objAddress = data.results[i].DPA;
                                //}
                                //    //alert(JSON.stringify(objAddress));
                                //var address = objAddress.ADDRESS.split(',');
                                //var address1 = address[0];
                                //var address2 = address[1];
                                //var address3 = address[2];
                                //var address4 = address[3];
                                //addPanelInSearchResults(address1, address2, address3, address4, objAddress.POSTCODE, objAddress.X_COORDINATE,objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);
                                try {
                                    objAddress = data.results[i].LPI;

                                    var address1 = "";

                                    if (objAddress.SAO_TEXT != undefined && objAddress.ORGANISATION != undefined && objAddress.SAO_TEXT == objAddress.ORGANISATION) {
                                        address1 = address1 + ConcateAddress(objAddress.ORGANISATION);
                                    }
                                    else if (objAddress.PAO_TEXT != undefined && objAddress.ORGANISATION != undefined && objAddress.PAO_TEXT == objAddress.ORGANISATION) {
                                        address1 = address1 + ConcateAddress(objAddress.ORGANISATION);
                                    }
                                    else {
                                        address1 = address1 + ConcateAddress(objAddress.ORGANISATION);
                                        address1 = address1 + ConcateAddress(objAddress.SAO_TEXT);
                                        address1 = address1 + ConcateAddress(objAddress.PAO_TEXT);
                                    }

                                    if (objAddress.SAO_START_NUMBER != undefined && objAddress.SAO_END_NUMBER == undefined) {
                                        address1 = address1 + ConcateAddress(objAddress.SAO_START_NUMBER + (objAddress.SAO_START_SUFFIX == undefined ? "" : objAddress.SAO_START_SUFFIX));
                                    }

                                    if (objAddress.SAO_START_NUMBER != undefined && objAddress.SAO_END_NUMBER != undefined) {
                                        address1 = address1 + ConcateAddress(objAddress.SAO_START_NUMBER + (objAddress.SAO_START_SUFFIX == undefined ? "" : objAddress.SAO_START_SUFFIX) + "-" + objAddress.SAO_END_NUMBER + (objAddress.SAO_END_SUFFIX == undefined ? "" : objAddress.SAO_END_SUFFIX));
                                    }

                                    if (objAddress.PAO_START_NUMBER != undefined && objAddress.PAO_END_NUMBER == undefined) {
                                        address1 = address1 + ConcateAddress(objAddress.PAO_START_NUMBER + (objAddress.PAO_START_SUFFIX == undefined ? "" : objAddress.PAO_START_SUFFIX));
                                    }

                                    if (objAddress.PAO_START_NUMBER != undefined && objAddress.PAO_END_NUMBER != undefined) {
                                        address1 = address1 + ConcateAddress(objAddress.PAO_START_NUMBER + (objAddress.PAO_START_SUFFIX == undefined ? "" : objAddress.PAO_START_SUFFIX) + "-" + objAddress.PAO_END_NUMBER + (objAddress.PAO_END_SUFFIX == undefined ? "" : objAddress.PAO_END_SUFFIX));
                                    }

                                    address1 = $.trim(address1.length == 0 ? "" : address1.substr(0, (address1.length - 1)));

                                    var address2 = "";

                                    address2 = address2 + ConcateAddress(objAddress.STREET_DESCRIPTION);
                                    address2 = address2 + ConcateAddress(objAddress.LOCALITY_NAME);

                                    address2 = $.trim(address2.length == 0 ? "" : address2.substr(0, (address2.length - 1)));
                                    //alert(objAddress.UPRN);
                                    addPanelInSearchResults(address1, address2, objAddress.TOWN_NAME, objAddress.ADMINISTRATIVE_AREA, objAddress.POSTCODE_LOCATOR, objAddress.X_COORDINATE, objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);
                                }
                                catch (E) {
                                    //debugger;
                                    //objAddress = data.results[i].DPA;
                                    //var address = objAddress.ADDRESS.split(',');
                                    //var address1 = address[0];
                                    //var address2 = address[1];
                                    //var address3=address[2];
                                    //var address4=address[3];

                                    //addPanelInSearchResults(address1, address2, address3, address4, objAddress.POSTCODE, objAddress.X_COORDINATE,objAddress.Y_COORDINATE, objAddress.ADDRESS, objAddress.UPRN);

                                }
                            }


                        }
                    }
                    else {
                        $(".recordNotFound").text("Address Not Found. Please Try Another Address.").show();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errorMessage = '';
                    $('#message').html(jqXHR.responseText);
                },
                complete: function () {
                    //alert("Showing " + (parseInt(parseInt(self.pageOffset) * 100) + self.pageOffset == 0 ? 1 : 0).toString() + "-" + (parseInt(parseInt(self.pageOffset) * 100) + 100).toString() + " of xxxxxx Results.");
                    //alert((parseInt(parseInt(self.pageOffset) * 100) + 1).toString());
                    $("#divResultscounter label").text("Showing " + (parseInt(parseInt(self.pageOffset) * 100) + 1).toString() + "-" + ((parseInt(parseInt(self.pageOffset) * 100) + 100) > parseInt(totalAddressesReturned) ? totalAddressesReturned : (parseInt(parseInt(self.pageOffset) * 100) + 100)).toString() + " of " + totalAddressesReturned.toString() + " Results.");
                    //dt_table= $("#tblSearchResults").DataTable({
                    //    "paging": false,
                    //    "ordering": false,
                    //    "info": false

                    //});
                    //$("#tblSearchResults_length").prop("visible",false);
                }
            });
        }*@
        ConcateAddress = function (newString) {
            return (newString == null ? "" : " " + newString + ",");
        }

        ResetMapAddress = function () {
        //    $("#tblSearchResults").DataTable({
        //"destroy":true});
            $(".searchResults .resultpanel").remove();
            $("#txtAddress1").val("");
            $("#txtAddress2").val("");
            $("#txtAddress3").val("");
            $("#txtAddress4").val("");
            $("#txtPostCode").val("");
            $("#txtEasting").val("");
            $("#txtNorthing").val("");
            $(".recordNotFound").text("").hide();
            $(".loadingMap").hide();
            $("#mapArea").empty();
            $("#textSearch").focus();
            $("#tblResultsFooter").hide();
            self.Confirmable = false;
        }

        addPanelInSearchResults = function (address1, address2, address3, address4, postcode, lat, long, address, UPRN) {
            //alert(UPRN);
            //$("#tblSearchResults").append("<tr><td class='resultpanel' title='" + address + "' onclick='clickPanel(this);' data-address1='" + address1 + "' data-address2='" + address2 + "' data-address3='" + address3 + "' data-address4='" + address4 + "' data-postcode='" + postcode + "' data-lat='" + lat + "', data-long='" + long + "', data-UPRN='" + UPRN + "'>" + address + "</td></tr>");
            $(".searchResults").append("<div class='resultpanel' title='" + address + "' onclick='clickPanel(this);' data-address1='" + address1 + "' data-address2='" + address2 + "' data-address3='" + address3 + "' data-address4='" + address4 + "' data-postcode='" + postcode + "' data-lat='" + lat + "', data-long='" + long + "', data-UPRN='" + UPRN + "'>" + address + "</div>");

            
        }

        clickPanel = function (elem) {
            self.Confirmable = true;
            $(".loadingMap").show();
            $("#mapArea").load("../OSMap.html", function () { callmefromwinfrom($(elem).attr("data-lat"), $(elem).attr("data-long")); });
            // $("#mapArea").load("../OSMap.html", function () { eBookingDrawPoint($(elem).attr("data-lat"), $(elem).attr("data-long")); });
            //alert($(elem).attr("data-UPRN"));
            $(elem).addClass("selected").siblings().removeClass("selected");

            $("#txtAddress1").val($(elem).attr("data-address1"));
            $("#txtAddress2").val($(elem).attr("data-address2"));
            $("#txtAddress3").val($(elem).attr("data-address3"));
            $("#txtAddress4").val($(elem).attr("data-address4"));
            $("#txtPostCode").val($(elem).attr("data-postcode"));
            $("#txtEasting").val($(elem).attr("data-lat"));
            $("#txtNorthing").val($(elem).attr("data-long"));
            $("#txtUPRN").val($(elem).attr("data-UPRN"));
        }

        confirmAddress = function () {
            //debugger;
            if (self.Confirmable == false) {
                return;
            }
            if (self.ClickArea == "HomeAddress") {
                self.HomeLineOneTemp = self.HomeAddress.LineOne();
                self.HomeLineTwoTemp = self.HomeAddress.LineTwo();
                self.HomeLineThreeTemp = self.HomeAddress.LineThree();
                self.HomeLineFourTemp = self.HomeAddress.LineFour();
                self.HomePostCodeTemp = self.HomeAddress.PostCode();
                //  self.HomeEasting = self.HomeAddress.Easting();

                self.HomeAddress.LineOne($("#txtAddress1").val());
                self.HomeAddress.LineTwo($("#txtAddress2").val());
                self.HomeAddress.LineThree($("#txtAddress3").val());
                self.HomeAddress.LineFour($("#txtAddress4").val());
                self.HomeAddress.PostCode($("#txtPostCode").val());

                self.HomeAddress.Easting($("#txtEasting").val());
                self.HomeAddress.Northing($("#txtNorthing").val());
                self.HomeAddress.UPRN($("#txtUPRN").val());
                $("#txtHomeAddressLineOne").prop("disabled", true);
                $("#txtHomeAddressLineTwo").prop("disabled", true);
                $("#txtHomeAddressLineThree").prop("disabled", true);
                $("#txtHomeAddressLineFour").prop("disabled", true);
                $("#txtHomeAddressPostCode").prop("disabled", true);
            }
            else if (self.ClickArea == "CollectionAddress") {

                self.CollectionLineOneTemp = self.CollectionAddress.LineOne();
                self.CollectionLineTwoTemp = self.CollectionAddress.LineTwo();
                self.CollectionLineThreeTemp = self.CollectionAddress.LineThree();
                self.CollectionLineFourTemp = self.CollectionAddress.LineFour();
                self.CollectionPostCodeTemp = self.CollectionAddress.PostCode();


                // alert(self.CollectionAddress.Northing);

                self.CollectionAddress.LineOne($("#txtAddress1").val());
                self.CollectionAddress.LineTwo($("#txtAddress2").val());
                self.CollectionAddress.LineThree($("#txtAddress3").val());
                self.CollectionAddress.LineFour($("#txtAddress4").val());
                self.CollectionAddress.PostCode($("#txtPostCode").val());
                self.CollectionAddress.Easting($("#txtEasting").val());
                self.CollectionAddress.Northing($("#txtNorthing").val());
                self.CollectionAddress.UPRN($("#txtUPRN").val());

                $("#txtCollectionAddressLineOne").prop("disabled", true);
                $("#txtCollectionAddressLineTwo").prop("disabled", true);
                $("#txtCollectionAddressLineThree").prop("disabled", true);
                $("#txtCollectionAddressLineFour").prop("disabled", true);
                $("#txtCollectionAddressPostCode").prop("disabled", true);
            }
            else if (self.ClickArea == "DestinationAddress") {

                self.DestinationLineOneTemp = self.DestinationAddress.LineOne();
                self.DestinationLineTwoTemp = self.DestinationAddress.LineTwo();
                self.DestinationLineThreeTemp = self.DestinationAddress.LineThree();
                self.DestinationLineFourTemp = self.DestinationAddress.LineFour();
                self.DestinationPostCodeTemp = self.DestinationAddress.PostCode();

                //alert(self.CollectionAddress.Northing);
                self.DestinationAddress.LineOne($("#txtAddress1").val());
                self.DestinationAddress.LineTwo($("#txtAddress2").val());
                self.DestinationAddress.LineThree($("#txtAddress3").val());
                self.DestinationAddress.LineFour($("#txtAddress4").val());
                self.DestinationAddress.PostCode($("#txtPostCode").val());
                self.DestinationAddress.Easting($("#txtEasting").val());
                self.DestinationAddress.Northing($("#txtNorthing").val());
                self.DestinationAddress.UPRN($("#txtUPRN").val());

                $("#txtDestinationAddressLineOne").prop("disabled", true);
                $("#txtDestinationAddressLineTwo").prop("disabled", true);
                $("#txtDestinationAddressLineThree").prop("disabled", true);
                $("#txtDestinationAddressLineFour").prop("disabled", true);
                $("#txtDestinationAddressPostCode").prop("disabled", true);
            }
            else {
                //alert(self.CollectionAddress.Northing);
                self.Patient.GPPracticeAddressLineOne($("#txtAddress1").val());
                self.Patient.GPPracticeAddressLineTwo($("#txtAddress2").val());
                self.Patient.GPPracticeAddressLineThree($("#txtAddress3").val());
                self.Patient.GPPracticeAddressLineFour($("#txtAddress4").val());
                //var xx = self.Patient.GPPracticeAddressLineFour();
                //console.log(xx.toString());
                self.Patient.GPPracticeAddressPostCode($("#txtPostCode").val());
                self.Patient.GPPracticeEasting($("#txtEasting").val());
                self.Patient.GPPracticeNorthing($("#txtNorthing").val());
                self.Patient.GPPracticeURPN($("#txtUPRN").val());

                $("#txtPatientGPPracticeAddressLineOne").prop("disabled", true);
                $("#txtPatientGPPracticeAddressLineTwo").prop("disabled", true);
                $("#txtPatientGPPracticeAddressLineThree").prop("disabled", true);
                $("#txtPatientGPPracticeAddressLineFour").prop("disabled", true);
                $("#txtPatientGPPracticeAddressPostCode").prop("disabled", true);
            }
            $("#textSearch").val("");
            HideOSSearch();
        }

        RefreshAddress = function (area) {
            if (area == 'HomeAddress') {
                self.HomeAddress.LineOne('');
                self.HomeAddress.LineTwo('');
                self.HomeAddress.LineThree('');
                self.HomeAddress.LineFour('');
                self.HomeAddress.PostCode('');
                //$("#txtHomeAddressLineOne").val('');
                //$("#txtHomeAddressLineTwo").val('');
                //$("#txtHomeAddressLineThree").val('');
                //$("#txtHomeAddressLineFour").val('');
                //$("#txtHomeAddressPostCode").val('');
                $("#txtHomeAddressLineOne").prop("disabled", false);
                $("#txtHomeAddressLineTwo").prop("disabled", false);
                $("#txtHomeAddressLineThree").prop("disabled", false);
                $("#txtHomeAddressLineFour").prop("disabled", false);
                $("#txtHomeAddressPostCode").prop("disabled", false);
            }
            else if (area == 'CollectionAddress') {
                self.CollectionAddress.LineOne('');
                self.CollectionAddress.LineTwo('');
                self.CollectionAddress.LineThree('');
                self.CollectionAddress.LineFour('');
                self.CollectionAddress.PostCode('');
                //$("#txtCollectionAddressLineOne").val('');
                //$("#txtCollectionAddressLineTwo").val('');
                //$("#txtCollectionAddressLineThree").val('');
                //$("#txtCollectionAddressLineFour").val('');
                //$("#txtCollectionAddressPostCode").val('');
                $("#txtCollectionAddressLineOne").prop("disabled", false);
                $("#txtCollectionAddressLineTwo").prop("disabled", false);
                $("#txtCollectionAddressLineThree").prop("disabled", false);
                $("#txtCollectionAddressLineFour").prop("disabled", false);
                $("#txtCollectionAddressPostCode").prop("disabled", false);
            }
            else if (area == 'DestinationAddress') {
                self.DestinationAddress.LineOne('');
                self.DestinationAddress.LineTwo('');
                self.DestinationAddress.LineThree('');
                self.DestinationAddress.LineFour('');
                self.DestinationAddress.PostCode('');
                //$("#txtDestinationAddressLineOne").val('');
                //$("#txtDestinationAddressLineTwo").val('');
                //$("#txtDestinationAddressLineThree").val('');
                //$("#txtDestinationAddressLineFour").val('');
                //$("#txtDestinationAddressPostCode").val('');
                $("#txtDestinationAddressLineOne").prop("disabled", false);
                $("#txtDestinationAddressLineTwo").prop("disabled", false);
                $("#txtDestinationAddressLineThree").prop("disabled", false);
                $("#txtDestinationAddressLineFour").prop("disabled", false);
                $("#txtDestinationAddressPostCode").prop("disabled", false);
            }
            else {
                self.Patient.GPPracticeAddressLineOne('');
                self.Patient.GPPracticeAddressLineTwo('');
                self.Patient.GPPracticeAddressLineThree('');
                self.Patient.GPPracticeAddressLineFour('');
                self.Patient.GPPracticeAddressPostCode('');

                //$("#txtPatientGPPracticeAddressLineOne").val('');
                //$("#txtPatientGPPracticeAddressLineTwo").val('');
                //$("#txtPatientGPPracticeAddressLineThree").val('');
                //$("#txtPatientGPPracticeAddressLineFour").val('');
                //$("#txtPatientGPPracticeAddressPostCode").val('');
                $("#txtPatientGPPracticeAddressLineOne").prop("disabled", false);
                $("#txtPatientGPPracticeAddressLineTwo").prop("disabled", false);
                $("#txtPatientGPPracticeAddressLineThree").prop("disabled", false);
                $("#txtPatientGPPracticeAddressLineFour").prop("disabled", false);
                $("#txtPatientGPPracticeAddressPostCode").prop("disabled", false);
            }

        }

        getFacilities = function (calledfrom) {
            // ShowProgressBar();
            var facilityTypeId;
            //debugger;
            if (calledfrom == 'Collection') {
                facilityTypeId = self.CollectionAddress.FacilityTypeId();
                if (facilityTypeId != '' && typeof facilityTypeId != 'undefined' && facilityTypeId != 4) {
                    //debugger;
                    //alert($("#lblCollectionDepartment").text());
                    $("#lblCollectionDepartment").text($("#lblCollectionDepartment").text().replace('*', ''));
                }
                else if (facilityTypeId == 4 && $("#lblCollectionDepartment").text().indexOf('*') < 0) {
                    $("#lblCollectionDepartment").text($("#lblCollectionDepartment").text() + ' *');
                }
            }
            else if (calledfrom == "Destination") {
                facilityTypeId = self.DestinationAddress.FacilityTypeId();
                if (facilityTypeId != '' && typeof facilityTypeId != 'undefined' && facilityTypeId != 4) {
                    //debugger;
                    //alert($("#lblCollectionDepartment").text());
                    $("#lblDestinationDepartment").text($("#lblDestinationDepartment").text().replace('*', ''));
                }
                else if (facilityTypeId == 4 && $("#lblDestinationDepartment").text().indexOf('*') < 0) {
                    $("#lblDestinationDepartment").text($("#lblDestinationDepartment").text() + ' *');
                }
            }
            else {
                facilityTypeId = '';

            }
            if (facilityTypeId != '' && typeof facilityTypeId != 'undefined') {//to avoid sending call on Page load
                $.ajax({
                    url: '@Url.Action("GetFacilities", "DropDown")',
                    type: 'GET',
                    headers: { 'RequestVerificationToken': '@TokenHeaderValue()' },
                    data: { facilityTypeId: facilityTypeId },
                    success: function (result) {
                        //alert(JSON.stringify(result));
                        if (result != 'false') {
                            //debugger;
                            if (calledfrom == 'Collection') {
                                self.CollectionAddress.Facilities([]);
                                self.CollectionAddress.FacilityDepartments([]);
                                clearAddress('Collection');
                                ko.utils.arrayForEach(result, function (dropdown) {
                                    //alert(dropdown);

                                    self.CollectionAddress.Facilities.push(new facilitiesModel(dropdown));
                                });
                            }
                            else if (calledfrom == 'Destination') {
                                self.DestinationAddress.Facilities([]);
                                self.DestinationAddress.FacilityDepartments([]);
                                clearAddress('Destination');
                                ko.utils.arrayForEach(result, function (dropdown) {
                                    // alert(dropdown);
                                    self.DestinationAddress.Facilities.push(new facilitiesModel(dropdown));
                                });
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        debugger;
                        var errorMessage = '';
                        $('#message').html(jqXHR.responseText);
                        $('.erriText').text(jqXHR.responseText);
                        ShowErrorMessage();
                    },
                    complete: function () {
                        HideProgressBar();
                    }
                });

            }
        }
        clearAddress = function (calledFrom) {
            if (calledFrom == 'Collection') {
                self.CollectionAddress.LineOne('');
                self.CollectionAddress.LineTwo('');
                self.CollectionAddress.LineThree('');
                self.CollectionAddress.LineFour('');
                self.CollectionAddress.PostCode('');
                self.CollectionAddress.ContactTelNo('');
                self.CollectionAddress.Easting('');
                self.CollectionAddress.Northing('');
                self.CollectionAddress.UPRN('');
                if (parseInt(self.CollectionAddress.FacilityTypeId()) == 5) {
                    $("#txtCollectionAddressLineOne").prop("disabled", false);
                    $("#txtCollectionAddressLineTwo").prop("disabled", false);
                    $("#txtCollectionAddressLineThree").prop("disabled", false);
                    $("#txtCollectionAddressLineFour").prop("disabled", false);
                    $("#txtCollectionAddressPostCode").prop("disabled", false);
                }
                //self.CollectionAddress.Northing('');
                //self.CollectionAddress.Northing('');
            }
            else if (calledFrom == 'Destination') {
                self.DestinationAddress.LineOne('');
                self.DestinationAddress.LineTwo('');
                self.DestinationAddress.LineThree('');
                self.DestinationAddress.LineFour('');
                self.DestinationAddress.PostCode('');
                self.DestinationAddress.ContactTelNo('');
                self.DestinationAddress.Easting('');
                self.DestinationAddress.Northing('');
                self.DestinationAddress.UPRN('');
                if (parseInt(self.DestinationAddress.FacilityTypeId()) == 5) {
                    $("#txtDestinationAddressLineOne").prop("disabled", false);
                    $("#txtDestinationAddressLineTwo").prop("disabled", false);
                    $("#txtDestinationAddressLineThree").prop("disabled", false);
                    $("#txtDestinationAddressLineFour").prop("disabled", false);
                    $("#txtDestinationAddressPostCode").prop("disabled", false);
                }
            }


        }
        getFacilityAddress = function (calledfrom) {
            // alert(calledfrom);
            //ShowProgressBar();
            var facilityId;
            if (calledfrom == 'GPPractice') {
                facilityId = self.Patient.GPPracticeId();
                // if facility selected is mainlandGP then clear the Address and assign empty to facilityID to avoid unnecessary Ajax Call
                if (parseInt(facilityId) == 132) {
                    self.Patient.GPPracticeAddressLineOne('');
                    self.Patient.GPPracticeAddressLineTwo('');
                    self.Patient.GPPracticeAddressLineThree('');
                    self.Patient.GPPracticeAddressLineFour('');
                    self.Patient.GPPracticeAddressPostCode('');
                    self.Patient.ContactTelephoneNo('');
                    self.Patient.GPPracticeEasting('');
                    self.Patient.GPPracticeNorthing('');
                    
                    $("#txtPatientGPPracticeAddressLineOne").prop("disabled", false);
                    $("#txtPatientGPPracticeAddressLineTwo").prop("disabled", false);
                    $("#txtPatientGPPracticeAddressLineThree").prop("disabled", false);
                    $("#txtPatientGPPracticeAddressLineFour").prop("disabled", false);
                    $("#txtPatientGPPracticeAddressPostCode").prop("disabled", false);
                    //self.Patient.GPPracticeGridReference(result.UPRN);
                    self.Patient.GPPracticeURPN('');
                    facilityId = '';
                }
            }
            else if (calledfrom == 'Collection') {
                facilityId = self.CollectionAddress.FacilityId();
                if (parseInt(facilityId) == 132) {
                    self.CollectionAddress.LineOne('');
                    self.CollectionAddress.LineTwo('');
                    self.CollectionAddress.LineThree('');
                    self.CollectionAddress.LineFour('');
                    self.CollectionAddress.PostCode('');
                    self.CollectionAddress.Easting('');
                    self.CollectionAddress.Northing('');
                    self.CollectionAddress.UPRN('');
                    $("#txtCollectionAddressLineOne").prop("disabled", false);
                    $("#txtCollectionAddressLineTwo").prop("disabled", false);
                    $("#txtCollectionAddressLineThree").prop("disabled", false);
                    $("#txtCollectionAddressLineFour").prop("disabled", false);
                    $("#txtCollectionAddressPostCode").prop("disabled", false);
                    facilityId = '';
                  
                 
                }
            }
            else if (calledfrom == "Destination") {
                facilityId = self.DestinationAddress.FacilityId();
                if (parseInt(facilityId) == 132) {
                    self.DestinationAddress.LineOne('');
                    self.DestinationAddress.LineTwo('');
                    self.DestinationAddress.LineThree('');
                    self.DestinationAddress.LineFour('');
                    self.DestinationAddress.PostCode('');
                    self.DestinationAddress.Easting('');
                    self.DestinationAddress.Northing('');
                    self.DestinationAddress.UPRN('');
                    $("#txtDestinationAddressLineOne").prop("disabled", false);
                    $("#txtDestinationAddressLineTwo").prop("disabled", false);
                    $("#txtDestinationAddressLineThree").prop("disabled", false);
                    $("#txtDestinationAddressLineFour").prop("disabled", false);
                    $("#txtDestinationAddressPostCode").prop("disabled", false);
                    facilityId = '';


                }
            }
            else {
                facilityId = '';
            }
            //debugger;
            //alert(facilityId);
            if (facilityId != '' && typeof facilityId != 'undefined') {
                //alert(typeof facilityId=='undefined');
                $.ajax({
                    url: '@Url.Action("GetAddress", "AccountWebAPI", new {httproute=""})',
                    type: 'GET',
                    headers: { 'RequestVerificationToken': '@TokenHeaderValue()' },
                    data: { facilityid: facilityId, isFacilityDepartment: 'false' },
                    success: function (result) {
                        if (calledfrom == 'GPPractice') {
                            self.Patient.GPPracticeAddressLineOne(result.AddressLine1);
                            self.Patient.GPPracticeAddressLineTwo(result.AddressLine2);
                            self.Patient.GPPracticeAddressLineThree(result.AddressLine3);
                            self.Patient.GPPracticeAddressLineFour(result.AddressLine4);
                            self.Patient.GPPracticeAddressPostCode(result.PostCode);

                            self.Patient.GPPracticeEasting(result.Easting);
                            self.Patient.GPPracticeNorthing(result.Northing);
                            //self.Patient.GPPracticeGridReference(result.UPRN);
                            self.Patient.GPPracticeURPN(result.UPRN);




                            self.Patient.Easting(result.Easting);
                            self.Patient.Northing(result.Northing);
                            self.Patient.UPRN(result.UPRN);
                            self.Patient.ContactTelephoneNo(result.FacilityPhoneNo);
                            //alert(self.Patient.Easting() + ", " + self.Patient.Northing() + ", " + self.Patient.UPRN());
                            $("#txtPatientGPPracticeAddressLineOne").prop("disabled", true);
                            $("#txtPatientGPPracticeAddressLineTwo").prop("disabled", true);
                            $("#txtPatientGPPracticeAddressLineThree").prop("disabled", true);
                            $("#txtPatientGPPracticeAddressLineFour").prop("disabled", true);
                            $("#txtPatientGPPracticeAddressPostCode").prop("disabled", true);
                        }
                        else if (calledfrom == 'Collection') {
                            self.CollectionAddress.LineOne(result.AddressLine1);
                            self.CollectionAddress.LineTwo(result.AddressLine2);
                            self.CollectionAddress.LineThree(result.AddressLine3);
                            self.CollectionAddress.LineFour(result.AddressLine4);
                            self.CollectionAddress.PostCode(result.PostCode);
                            self.CollectionAddress.Easting(result.Easting);
                            self.CollectionAddress.Northing(result.Northing);
                            self.CollectionAddress.UPRN(result.UPRN);
                            $("#txtCollectionAddressLineOne").prop("disabled", true);
                            $("#txtCollectionAddressLineTwo").prop("disabled", true);
                            $("#txtCollectionAddressLineThree").prop("disabled", true);
                            $("#txtCollectionAddressLineFour").prop("disabled", true);
                            $("#txtCollectionAddressPostCode").prop("disabled", true);
                            self.CollectionAddress.FacilityDepartments([]);
                            getFacilityDepartments(calledfrom);

                        }
                        else if (calledfrom == 'Destination') {
                            self.DestinationAddress.LineOne(result.AddressLine1);
                            self.DestinationAddress.LineTwo(result.AddressLine2);
                            self.DestinationAddress.LineThree(result.AddressLine3);
                            self.DestinationAddress.LineFour(result.AddressLine4);
                            self.DestinationAddress.PostCode(result.PostCode);
                            self.DestinationAddress.Easting(result.Easting);
                            self.DestinationAddress.Northing(result.Northing);
                            self.DestinationAddress.UPRN(result.UPRN);
                            $("#txtDestinationAddressLineOne").prop("disabled", true);
                            $("#txtDestinationAddressLineTwo").prop("disabled", true);
                            $("#txtDestinationAddressLineThree").prop("disabled", true);
                            $("#txtDestinationAddressLineFour").prop("disabled", true);
                            $("#txtDestinationAddressPostCode").prop("disabled", true);
                            self.DestinationAddress.FacilityDepartments([]);
                            getFacilityDepartments(calledfrom);
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        debugger;
                        var errorMessage = '';
                        //if (jqXHR.responseText.toLowerCase().indexOf('authorization has been denied') >= 0 || jqXHR.responseText.toLowerCase().indexOf('unauthorized attempt to e-booking') >= 0)
                        //{
                        //    $('.erriText').text(jqXHR.responseText);
                        //    ShowErrorMessage();
                        //    window.location.reload();
                        //}
                        $('#message').html(jqXHR.responseText);
                        $('.erriText').text(jqXHR.responseText);
                        ShowErrorMessage();
                    },
                    complete: function () {
                        HideProgressBar();
                    }

                });
            }
        }

        getFacilityDepartments = function (calledfrom) {
            //alert('I am called');

            var facilityId;
            if (calledfrom == 'Collection') {
                facilityId = self.CollectionAddress.FacilityId();
            }
            else if (calledfrom == "Destination") {
                facilityId = self.DestinationAddress.FacilityId();
            }
            //ShowProgressBar();
            $.ajax({
                url: '@Url.Action("GetFacilityDepartments", "DropDown")',
                type: 'GET',
                headers: { 'RequestVerificationToken': '@TokenHeaderValue()' },
                data: { facilityid: facilityId, isFacilityDepartment: 'false' },
                success: function (result) {
                    //alert(JSON.stringify(result));
                    if (result != 'false') {
                        if (calledfrom == 'Collection') {
                            ko.utils.arrayForEach(result, function (dropdown) {
                                // alert(dropdown);
                                self.CollectionAddress.FacilityDepartments.push(new facilityDepartmentsModel(dropdown));
                            });
                        }
                        else if (calledfrom == 'Destination') {
                            ko.utils.arrayForEach(result, function (dropdown) {
                                // alert(dropdown);
                                self.DestinationAddress.FacilityDepartments.push(new facilityDepartmentsModel(dropdown));
                            });
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    debugger;
                    var errorMessage = '';
                    $('#message').html(jqXHR.responseText);
                    $('.erriText').text(jqXHR.responseText);
                    ShowErrorMessage();
                },
                complete: function () {
                    HideProgressBar();
                }
            });
        }
    }


    $(function () {

        //$('#txtPatientJourneyDate, #txtPatienBirthtDate, #txtPatientWeighingDate').bind("cut copy paste contextmenu", function (e) {
        //    e.preventDefault();
        //});

        //$('#txtPatientJourneyDate, #txtPatienBirthtDate, #txtPatientWeighingDate').keydown(function (e) {
        //    e.preventDefault();
        //});

        WizardViewModeling = new WizardViewModel();

        //WizardViewModeling.a = Base64.decode(getParameterByName('a').toString());
        //alert(WizardViewModeling.a.toString());
        $("#textSearch").focus(function () {
            $("#textSearch").removeClass("fieldError");
        });

        $('#textSearch').keypress(function (e) {
            if (e.keyCode == 13) {
                GetAndBindOSSearchResults();
                return false; // prevent the button click from happening
            }
        });

        $("#wizard").steps({
            headerTag: "h2",
            bodyTag: "div",
            transitionEffect: "fade",
            transitionEffectSpeed: 250
        });


        AppointmentDateTimeAcceptanceClick = function () {
            $("#AppointmentDateTimeAcceptanceDialog").dialog("close");
        }

        PrivatePatientConfirmationClick = function () {
            $("#PrivatePatientConfirmationDialog").dialog("close");
        }

        TransportSelectionConfirmationYesClick = function () {
            $("#TransportSelectionConfirmationDialog").dialog("close");

            $("#TransportSelectionConfirmationYesSelectedDialog").dialog("open");
        }

        TransportSelectionConfirmationNoClick = function () {
            window.open('@Url.Action("FlowChart", "Journey")');
            //$("#TransportSelectionConfirmationDialog").dialog("close");

            //$("#TransportSelectionConfirmationNoSelectedDialog").dialog("open");
        }

        TransportSelectionConfirmationYesSelectedClick = function () {

            $("#TransportSelectionConfirmationYesSelectedDialog").dialog("close");
        }

        TransportSelectionConfirmationNoSelectedClick = function () {
            $("#TransportSelectionConfirmationNoSelectedDialog").dialog("close");

        }

        TransportRequestPatientTypeFlowChartClick = function () {
            window.open('@Url.Action("FlowChart", "Journey")');
        }

        PatientIsRiskAssessmentRequiredConfirmationClick = function () {
            $("#PatientIsRiskAssessmentRequiredConfirmationDialog").dialog("close");

            $("#wizard").steps("setStep", 3);
        }

        PatientIsRiskAssessmentRequiredNonConfirmationClick = function () {
            $("#PatientIsRiskAssessmentRequiredNonConfirmationDialog").dialog("close");
            //WizardViewModeling.RiskAssessment = new RiskAssessmentModel();

        }

        EBookingCompleteClick = function () {
            $("#EBookingCompleteDialog").dialog("close");
        }

        SendEmailToUser = function (emailaddress) {

            $.ajax({

                url: '@Url.Action("SendPDFEmail", "Journey")',

                contentType: "application/json;charset=utf-8",

                type: "GET",

                data: { refNumber: WizardViewModeling.Patient.BookingNo() },

                beforeSend: function (xhr) {
                    //xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
                },
                success: function (result) {
                    //debugger;
                    if (result == "True") {
                        //$("#EBookingCompleteDialog").dialog("open");
                        //$("#EBookingCompleteDialog").dialog("open");
                       // $("#EBookingCompleteDialog").focus();
                      //  $("#EBookingCompleteDialog, #dimBg1").show();


                    }
                    else {
                        ShowErrorMessage();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errorMessage = '';
                    $('#message').html(jqXHR.responseText);
                    ShowErrorMessage();
                    return false;
                },
                complete: function () {
                    HideProgressBar();
                }
            });
        }

        //ShowProgressBar();
        //  alert(WizardViewModeling.a1.toString());
        var refNumber = '@Request.Params["q"]';

        //debugger;
        refNumber = refNumber.split("_", 3);
        WizardViewModeling.checkvieworedit = refNumber[2] / 56 / 74;
        refNumber = refNumber[1] / 498;

        // alert(refNumber);
        //checkvieworedit=
        if (refNumber == '' || refNumber.toString() == "NaN") {
            // alert('I am not going to ajax');
        }
        else {
            $.ajax({

                url: '@Url.Action("", "JourneyWebAPI", new { httproute = "" })',

                contentType: "application/json;charset=utf-8",

                type: "GET",

                data: { referenceNumber: refNumber },

                headers: { 'RequestVerificationToken': '@TokenHeaderValue()' },

                beforeSend: function (xhr) {
                    //xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
                },

                success: function (result) {
                    //alert(result.CollectionAddress.IsThisPatientHomeAddress);
                    //alert(result.Patient.JourneyDate);
                    // alert(self.Patient.JourneyDate());
                    //Patient = new PatientModel();
                    // alert(JSON.stringify(result.Patient));
                    ko.mapping.fromJS(result, {}, WizardViewModeling);
                    debugger;
                    if (result.CollectionAddress.IsThisPatientHomeAddress == true && parseInt(result.CollectionAddress.FacilityId) == 0) {
                        WizardViewModeling.CollectionAddress.FacilityTypeId('');
                    }
                    if (result.DestinationAddress.IsThisPatientHomeAddress == true && parseInt(result.DestinationAddress.FacilityId) == 0) {
                        WizardViewModeling.DestinationAddress.FacilityTypeId('');
                    }
                    else
                        WizardViewModeling.DestinationAddress.FacilityTypeId(result.DestinationAddress.FacilityTypeId);
                    
                   // alert(result.CollectionAddress.IsThisPatientHomeAddress);
                    //alert(result.DestinationAddress.IsThisPatientHomeAddress);
                    //alert(result.Patient.JourneyDate);
                    //alert(WizardViewModeling.Patient.JourneyDate());
                    //alert(getDate(result.Patient.JourneyDate));
                    //alert($.datepicker("setDate", result.Patient.JourneyDate));
                    // var datePicker = $("#txtPatientJourneyDate").datepicker({ firstDay: 1 });
                    //  alert(datePicker.datepicker("setDate", getDate(result.Patient.JourneyDate)));
                    $("#txtPatientJourneyDate").datepicker("setDate", getDate(result.Patient.JourneyDate));
                  
                    if (getDate(result.Patient.WeighingDate) != '01/01/1' && result.Patient.WeighingDate)
                        $("#txtPatientWeighingDate").datepicker("setDate", getDate(result.Patient.WeighingDate));
                    else
                        WizardViewModeling.Patient.WeighingDate('');

                    $("#txtPatienBirthtDate").datepicker("setDate", getDate(result.Patient.BirthDate));
                    WizardViewModeling.Patient.JourneyDateBeforeUpdate(WizardViewModeling.Patient.JourneyDate());
                    //var journeyDate = new Date(result.Patient.JourneyDate);
                    // alert(journeyDate);
                    //var datenow = new Date();
                    //alert(datenow - appointmentDateTime);
                    //var diffinhours = (journeyDate - datenow) / 1000 / 60 / 60; //console.log(getDate(result.Patient.JourneyDate));
                    if (WizardViewModeling.checkvieworedit != 1) {
                        //debugger;
                        $("#wizard input").prop("disabled", true);
                        $("#wizard select").prop("disabled", true);
                        $("#confirmBooking").prop("disabled", true);
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errorMessage = '';
                    $('#message').html(jqXHR.responseText);
                    $('.erriText').text(jqXHR.responseText);
                    ShowErrorMessage();
                },
                complete: function () {
                    HideProgressBar();
                }
            });
        }



        ko.applyBindings(WizardViewModeling);
    });
    getDate = function (date) {
        debugger;
        var browserandversion = get_browser_info();
        if (browserandversion.name.toLowerCase().indexOf('msie') >= 0 && parseFloat(browserandversion.version) < 9.0) {
            //alert(NewDate(date));
            return NewDate(date);
            //alert(new Date(date.replace(/-/g, '/')));
            //return $.datepicker.formatDate('dd M yy', new Date(date.replace(/-/g, '/')));
        }
        return $.datepicker.formatDate('dd/mm/yy', new Date(date));
    }
    get_browser_info = function () {
        var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(M[1])) {
            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
            return { name: 'IE', version: (tem[1] || '') };
        }
        if (M[1] === 'Chrome') {
            tem = ua.match(/\bOPR\/(\d+)/)
            if (tem != null) { return { name: 'Opera', version: tem[1] }; }
        }
        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
        if ((tem = ua.match(/version\/(\d+)/i)) != null) { M.splice(1, 1, tem[1]); }
        return {
            name: M[0],
            version: M[1]
        };
    }
    NewDate = function (dateArg) {
        var dateValues = dateArg.split('-');
        var date = new Date(dateValues[0], parseFloat(dateValues[1]) - 1, dateValues[2].substring(0, 2));
        return $.datepicker.formatDate('dd/mm/yy', date);
    }
    //$(document).keyup(function (e) {
    //    if (e.keyCode == 27) {
    //        alert('Escape Not allowed');
    //        return false;
    //    }

    //});
</script>
<style>
    body {
        overflow-x: hidden;
    }
</style>
<style type="text/css">
    .ui-widget-content {
        background-color: #fff;
        border: 5px solid #cccccc;
        border-radius: 10px;
        min-height: 200px;
        width: 600px !important;
        margin: 0px auto;
        display: none;
        top: 0;
    }

    input[type=checkbox] {
        padding: 0;
    }
</style>

<div id="dimBg" class="disabledBackground"></div>

<div id="searchPlaces" style="height:677px">
    <div class="popup-header">
        <div class='popup-header-text'>Address Search</div>
    </div>
    <div class="searchArea">
        <input type="text" id="textSearch" class="form-control" />
        <div class="searchbutne" onclick='OSAddressResultsPageSearch_Click();'>
            <img src="~/Images/search.png" />
        </div>
    </div>
    <div class="searchResults">
       
        @*<table id="tblSearchResults" >
            <thead>
                <tr>
                    <th style="display:none">Address</th>
                </tr>
            </thead>
            
            <tfoot>
                <tr>
                    <td>
                        
                       
                     </td>
                </tr>
            </tfoot>
        </table>*@
       
        <p class="recordNotFound"></p>
    </div>
    @*<div style="width: 97%; height: auto; background-color: transparent; margin-top:0px; margin:10px; "></div>*@
    <div class="row">
        <div id="tblResultsFooter" style="display:none; background-color: transparent; padding:10px;" class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div id="divResultscounter" class="col-lg-6 col-md-6 col-sm-6 col-xs-6" style="width:50%"> <label style="width:100%"></label></div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" style="width:50%">
                <button type="button" class="btn btn-default btn-sm pull-right" data-bind="click:OSAddressResultsPageLast_Click">Last</button>
                <button type="button" class="btn btn-default btn-sm pull-right" data-bind="click:OSAddressResultsPageNext_Click">Next</button>
                <button type="button" class="btn btn-default btn-sm pull-right" data-bind="click:OSAddressResultsPagePrevious_Click">Previous</button>
                <button type="button" class="btn btn-default btn-sm pull-right" data-bind="click:OSAddressResultsPageFirst_Click">First</button>
            </div>
        </div>
         </div>
    
    <div class="searchResultsContent">
        <div class="contorlsArea">
            <p style="display:none" class="controlBox"><span class="lable">UPRN:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtUPRN" /></p>

            <p class="controlBox"><span class="lable">Address Line 1:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtAddress1" /></p>
            <p class="controlBox"><span class="lable">Address Line 2:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtAddress2" /></p>
            <p class="controlBox"><span class="lable">Address Line 3:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtAddress3" /></p>
            <p class="controlBox"><span class="lable">Address Line 4:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtAddress4" /></p>
            <p class="controlBox"><span class="lable">Post Code:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtPostCode" /></p>
            <p class="controlBox"><span class="lable">Easting:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtEasting" /></p>
            <p class="controlBox"><span class="lable">Northing:</span> <input readonly="readonly" type="text" class="form-control textbox" id="txtNorthing" /></p>
        </div>
        <div id="mapArea">

            <p class="loadingMap">Loading Map...</p>
        </div>
    </div>
    <div class="butonPanel">
        <div class="button" id="btnConfirmAddress" style="margin-right:2px;" onclick='confirmAddress();'>
            Confirm
        </div>
        <div class="button" onclick='$("#textSearch").val("");ResetMapAddress();'>
            Reset
        </div>
        <div class="button" onclick='$("#textSearch").val(""); HideOSSearch();'>
            Cancel
        </div>
    </div>
</div>
<div id="AppointmentDateTimeAcceptanceDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Warning</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main">
            <div class="popupredtxt" style="margin-top: 5px; width: 100%; margin-bottom: 10px; margin-left: 0;">
                YOU HAVE PROVIDED LESS THAN 24 HOURS NOTIFICATION FOR THIS JOURNEY!
            </div>
            <ul style="margin-left:-15px;">
                <li style="list-style-type: disc;">THE PTS SERVICE MAY NOT BE ABLE TO ACCOMODATE THIS TRIP  AND RESERVE THE RIGHT TO REFUSE THIS TRIP.</li>
                <li style="list-style-type: disc;">THE PTS SERVICE  ALSO RESERVES THE RIGHT TO CROSS CHARGE THE REQUESTING DEPARTMENT FOR ADDITIONAL COSTS INCURRED IN MEETING A LATE NOTICE REQUEST</li>
            </ul>
        </div>
        <div class="popup-button" style="margin-left:0px;" data-bind="click: AppointmentDateTimeAcceptanceClick, clickBubble: false">Confirm acceptance and proceed</div>
    </div>
</div>

<div id="PrivatePatientConfirmationDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Private Patient</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main">

            <ul>
                <li>Have you called PTS Service - using 01983 822099 Ext 3504 ?</li>
            </ul>
        </div>
        <div class="popup-button" data-bind="click: PrivatePatientConfirmationClick, clickBubble: false">Yes</div>
    </div>
</div>

<div id="TransportSelectionConfirmationDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Transport Selection</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main" style="margin-top:5px;">
            Have you verified the patient's transport  requirements - using the ‘Ambulance Service Transport Request Patient Type FLOW CHART’? PLEASE REMEMBER TO ADVISE US IF A RISK  ASSESSMENT IS REQUIRED
        </div>
        <div class="popup-button" style="margin-left:0px;" data-bind="click: TransportSelectionConfirmationYesClick, clickBubble: false">Yes</div>
        <div class="popup-button" data-bind="click: TransportSelectionConfirmationNoClick, clickBubble: false">No</div>
    </div>
</div>

<div id="TransportSelectionConfirmationYesSelectedDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Transport Selection</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main" style="margin-top:5px;">
            <ul style="margin-left:-25px;width:auto;">
                <li style="list-style-type:disc;">Failure to request the correct transportation, may result in the incorrect resources being sent, therefore the patient may not be able to be conveyed</li>
                <li style="list-style-type:disc;">will result in an abortive journey and a cross charge to the requesting department</li>
                <li style="list-style-type:disc;">IMPORTANT: Empty Wheelchairs will not be conveyed & Electric Wheelchairs must be able to be placed in manual mode for loading and unloading.</li>
            </ul>
        </div>
        <div class="popup-button" style="width:100%; margin-left:0;" data-bind="click: TransportSelectionConfirmationYesSelectedClick, clickBubble: false">Confirm and proceed</div>
    </div>
</div>

<div id="TransportSelectionConfirmationNoSelectedDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Flow Chart</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main" style="margin-top:5px;">
            <img alt="Flow Chart" src="../images/FlowChart.jpg" style="margin:10px auto 50px auto; display:block; width:565px; height:443px;" />
        </div>
        <div class="popup-button" style="width:100%;margin-left:0;" data-bind="click: TransportSelectionConfirmationNoSelectedClick, clickBubble: false">Confirm and proceed</div>
    </div>
</div>

<div id="PatientIsRiskAssessmentRequiredConfirmationDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Risk Assessment</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main" style="margin:0; margin-top:5px;">
            72 Hours are required to carry out a risk assessment - please contact the PTS Service - using 01983 822099 Ext 3504 - if journey time is within 72 hours
        </div>
        <div class="popup-button" style="margin-left: 0px;" data-bind="click: PatientIsRiskAssessmentRequiredConfirmationClick, clickBubble: false">Ok</div>
    </div>
</div>

<div id="PatientIsRiskAssessmentRequiredNonConfirmationDialog" class="popup-bg">
    <div class="popup-header">
        <div class='popup-header-text'>Risk Assessment</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main">
            <div class="popupredtxt" style="margin:0; margin-top:5px; width:100%;">
                Failure to provide accurate information will delay the transfer of the patient and will result in additional charges.
            </div>
        </div>
        <div class="popup-button" style="margin-left: 0px;" id="TransportRequirementIsRiskAssessmentRequiredNonConfirmation" data-bind="value:TransportRequirement.Id, event: {click: PatientIsRiskAssessmentRequiredNonConfirmationClick}, showMessageToolTip: TransportRequirement.Id">Ok</div>
    </div>
</div>
<div id="dimBg1" class="disabledBackground"></div>
<div id="EBookingCompleteDialog">
    <div class="popup-header">
        <div class='popup-header-text'>Booking Complete</div>
    </div>
    <div class="popup-body-innder">
        <div class="pop-up-text-main">
            <div class="popupgreentxt">Your Booking is now complete, thank you</div><br />
            Note your booking will submitted for approval, you should receive confirmation of acceptance within one working day <br /><br />
            Your unique booking reference is <input type="text" id="txtReferenceBookingNumber" disabled="disabled" class="form-control" style="margin-bottom:25px; width:100%;" />
            Please quote this in any correspondence, this reference will be required should you need to amend any bookings.
        </div>
        <div class="popup-button" style="width:150px; margin-left:0; margin-right:10px;" id="EBookingComplete" data-bind="event: {click: LogOutClick}, clickBubble: false,">Logout</div>
        <div class="popup-button" style="width:240px; margin-left:0;" id="EBookingComplete" data-bind="event: {click: MakeAnotherBookingClick}, clickBubble: false,">Make Another Booking</div>

    </div>
</div>

<div class="ppopchecknewone">

    <div id="NewJourneyAcceptanceDialog">
        <div class="popup-header">
            <div class='popup-header-text'>Important Notice</div>
        </div>
        <div class="popupredtxt">
            It is your responsibility to ensure all journey details are correct and that any amendments to this jouney are advised at least 48 hours before the journey time The PTS service reserves the right to cross charge your department for any additional costs incurred as a result of
        </div>
        <div class="bullettop">
            <ul style="text-transform:none;">
                <li>Inaccurate / incomplete booking information </li>
                <li>Incorrect transport type selection </li>
                <li>Amendments requested with in 24 hours </li>
                <li>Cancellation requested within 24 hours</li>
                <li>Invalid journey (eg failure to notify change of patient status) </li>
                <li>Risk assessment not requested with 72 hours notice</li>
            </ul>
        </div>
        <div class="popup-button" data-bind="click:  ConformBookingAcceptanceClick, clickBubble: false">Confirm acceptance and proceed</div>
        @*<div class="popup-button" data-bind="click: NewJourneyAcceptanceClick, clickBubble: false">No abdon booking</div>*@
    </div>
</div>

<div id="RecordNotEditableDialog">
    <div class="popup-headerred">
        <div class='popup-header-text'>EBooking</div>
    </div>
    <div class="popupiconerror"></div>
    <div class="popupredtxt">
        THERE ARE LESS THAN 24 HOURS TO TRIP TIME
        YOU MUST CONTACT THE PTS DISPATCHER
        ON 01983 822088 ext 3504

    </div>
    <div>
        <button type="button" class="btn-warning" data-bind="click: RecordNotEditableOkClick, clickBubble: false">PLEASE CONFIRM CALL HAS BEEN MADE</button>
    </div>
</div>
<div id="wizard">
    <div class="formcontaner">
        <div class="request-heading">
            <span class="mainheading">Patient and Appointment Details:</span>
        </div>
        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 5px;">
                    <label>For a mainland Repatriation</label>
                    <input type="checkbox" id="chkPatientIsMainlandRepatriation" name="chkPatientIsMainlandRepatriation" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: Patient.IsMainlandRepatriation, checked: Patient.IsMainlandRepatriation, showMessageToolTip: Patient.IsMainlandRepatriation" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                </div>
            </div>
        </div>
        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 10px; margin-bottom: 15px; ">
                    <label>If a risk assessment is required</label>
                    <input type="checkbox" id="chkPatientIsRiskAssessmentRequired" name="chkPatientIsRiskAssessmentRequired" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: Patient.IsRiskAssessmentRequired, checked : Patient.IsRiskAssessmentRequired, event: { click: PatientIsRiskAssessmentRequiredChange }" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                </div>
            </div>
        </div>
        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Date of Journey *</label>
                    @*datepicker: Patient.JourneyDate, datepickerOptions: { changeYear: true, changeMonth: true, dateFormat: 'dd/mm/yy', minDate: new Date()},*@
                    @*data-bind="  event: { change: AppointmentDateTimeChange }, enable: !Patient.IsMainlandRepatriation(), showMessageToolTip: Patient.JourneyDate"*@
                    <input type="text" id="txtPatientJourneyDate" name="txtPatientJourneyDate" class="form-control" data-bind="datepicker: Patient.JourneyDate, datepickerOptions: { changeYear: true, changeMonth: true, dateFormat: 'dd/mm/yy', minDate: new Date(), maxDate: 42 }, event: { change: AppointmentDateTimeChange }, enable: !Patient.IsMainlandRepatriation(), showMessageToolTip: Patient.JourneyDate, event:{keydown:function(data,event){datefromkeyboard(data,event,'JourneyDate');}}" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Standard Appointment Time *</label>
                    <select id="ddlPatientAppointmentTime" name="ddlPatientAppointmentTime" class="form-control" data-bind="options:Dropdown.AppointmentTimes, optionsValue:'AppointmentTimeId', optionsText:'AppointmentTimeName', value:Patient.AppointmentTimeId, event: { change: AppointmentDateTimeChange },enable: !Patient.IsMainlandRepatriation(), optionsCaption: 'Choose...', showMessageToolTip: Patient.AppointmentTimeId"></select>
                </div>
            </div>
        </div>
        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-bottom: 15px; ">
                    <label>Other useful information if available</label>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                </div>
            </div>
        </div>
        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Actual Appointment Time </label>
                    <input type="text" id="txtPatientActualAppointmentTime" name="txtPatientActualAppointmentTime" class="form-control" data-bind="value: Patient.ActualAppointmentTime, mask:'99:99', enable: !Patient.IsMainlandRepatriation(), showMessageToolTip: Patient.ActualAppointmentTime" />@*value: Patient.ActualAppointmentTime*@
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Estimated Appointment Duration </label>
                    <select id="ddlPatientEstimatedAppointmentDuration" name="ddlPatientEstimatedAppointmentDuration" class="form-control" data-bind="options:Dropdown.EstimatedAppointmentDurations, optionsValue:'EstimatedAppointmentDurationId', optionsText:'EstimatedAppointmentDurationName', value:Patient.EstimatedAppointmentDurationId, enable: !Patient.IsMainlandRepatriation(), optionsCaption: 'Choose...', showMessageToolTip: Patient.EstimatedAppointmentDurationId"></select>
                </div>
            </div>
        </div>


        <div class="mainheadingclick" style="font-size: 17px; width:100%; padding:4px">Patient Details:</div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Title *</label>
                    <select id="ddlPatientTitle" name="ddlPatientTitle" class="form-control" data-bind="options:Dropdown.Titles, optionsValue:'TitleId', optionsText:'TitleName', value:Patient.GenderTitleId, optionsCaption: 'Choose...', showMessageToolTip: Patient.GenderTitleId"></select>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>First Name *</label>
                    <input type="text" id="txtPatientFirstName" name="txtPatientFirstName" class="form-control" data-bind="value: Patient.FirstName, showMessageToolTip : Patient.FirstName" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Surname *</label>
                    <input type="text" id="txtPatientSurname" name="txtPatientSurname" class="form-control" data-bind="value: Patient.Surname, showMessageToolTip : Patient.Surname" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Date of Birth *</label>
                    <input type="text" id="txtPatienBirthtDate" name="txtPatienBirthtDate" class="form-control" data-bind="datepicker: Patient.BirthDate, datepickerOptions: {changeYear: true, changeMonth: true, yearRange: '-150:+0', dateFormat: 'dd/mm/yy', maxDate: new Date()}, mask:'99/99/9999', showMessageToolTip : Patient.BirthDate" />    @*, event:{keydown:function(data,event){datefromkeyboard(data,event,'BirthDate');}}, keyupBubble:false*@
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>NHS Number *</label>
                    <input type="text" id="txtPatientNHSNumber" name="txtPatientNHSNumber" class="form-control" data-bind="value: Patient.NHSNumber, mask:'999 999 9999', showMessageToolTip : Patient.NHSNumber, event:{change:nhsNumberChange}" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Isle of Wight Number</label>
                    <input type="text" id="txtPatientIsleOfWightNo" name="txtPatientIsleOfWightNo" class="form-control" data-bind="value: Patient.IsleOfWightNo, mask:'IW999999',placeholder:'IW______', showMessageToolTip : Patient.IsleOfWightNo,event:{change:IOWNumberChange}" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Last Recorded Patient weight (kg)</label>
                    <input type="text" id="txtLastRecordedPatientPatientWeight" name="txtLastRecordedPatientPatientWeight" class="form-control" data-bind="value: Patient.LastRecordedPatientWeight, showMessageToolTip : Patient.LastRecordedPatientWeight" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Date of Weighing</label>
                    <input type="text" id="txtPatientWeighingDate" name="txtPatientWeighingDate" class="form-control" data-bind="datepicker: Patient.WeighingDate, datepickerOptions: {changeYear: true, changeMonth: true, yearRange: '-10:+0', dateFormat: 'dd/mm/yy', maxDate: new Date()}, mask:'99/99/9999', showMessageToolTip : Patient.WeighingDate" /> @*, event:{keydown:function(data,event){datefromkeyboard(data,event,'WeightDate');}}, keyupBubble:false*@
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Name of GP *</label>
                    <input type="text" id="txtPatientNameOfGP" name="txtPatientNameOfGP" class="form-control" data-bind="value: Patient.NameOfGP, showMessageToolTip : Patient.NameOfGP" />
                    <span class="formextratxt">If the patient is not registered with a GP please contact PTS service<br />using 01983 822099 Ext 3504</span>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>GP Practice Name *</label>
                    <select id="ddlPatientGPPractice" name="ddlPatientGPPractice" class="form-control" data-bind="options:Dropdown.GPPractices, optionsValue:'GPPracticeId', optionsText:'GPPracticeName', value:Patient.GPPracticeId, event:{change:getFacilityAddress('GPPractice')}, optionsCaption: 'Choose...', showMessageToolTip: Patient.GPPracticeId"></select>
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>GP Practice Address - Line one *</label>
                    <div class="formfieldsearch">

                        <input type="text" id="txtPatientGPPracticeAddressLineOne" name="txtPatientGPPracticeAddressLineOne" class="form-control" style="width: 76%; float: left" data-bind="value: Patient.GPPracticeAddressLineOne, showMessageToolTip : Patient.GPPracticeAddressLineOne" />
                        <div class="searchbutne" title="Refresh Address" onclick="RefreshAddress('');" style="width:10%">
                            <img src="~/Images/Refresh-Icon-website-150x150.png" width="23" />

                        </div>
                        <div class="searchbutne" title="Search Address" onclick="LoadOSSearch('');">
                            <img src="~/Images/search.png" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>GP Practice Address - Line two</label>
                    <input type="text" id="txtPatientGPPracticeAddressLineTwo" name="txtPatientGPPracticeAddressLineTwo" class="form-control" style="width:70%; float:left" data-bind="value: Patient.GPPracticeAddressLineTwo, showMessageToolTip : Patient.GPPracticeAddressLineTwo" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>GP Practice Address - Line three (town) *</label>
                    <input type="text" id="txtPatientGPPracticeAddressLineThree" name="txtPatientGPPracticeAddressLineThree" class="form-control" data-bind="value: Patient.GPPracticeAddressLineThree, showMessageToolTip : Patient.GPPracticeAddressLineThree" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>GP Practice Address - Line four (county) *</label>
                    <input type="text" id="txtPatientGPPracticeAddressLineFour" name="txtPatientGPPracticeAddressLineFour" class="form-control" data-bind="value: Patient.GPPracticeAddressLineFour, showMessageToolTip : Patient.GPPracticeAddressLineFour" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>GP Practice Address - Post Code </label>

                    <input type="text" id="txtPatientGPPracticeAddressPostCode" name="txtPatientGPPracticeAddressPostCode" class="form-control" data-bind="value: Patient.GPPracticeAddressPostCode, showMessageToolTip : Patient.GPPracticeAddressPostCode" />


                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Contact Telephone Number *</label>
                    <input type="text" id="txtPatientContactTelephoneNo" name="txtPatientContactTelephoneNo" class="form-control" data-bind="value: Patient.ContactTelephoneNo, showMessageToolTip : Patient.ContactTelephoneNo" />
                </div>
            </div>
        </div>

        <div class="mainheadingclick" style="font-size: 17px; width:100%; padding:4px">Patient Home Address:</div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 5px; float:left; margin-bottom:15px;">
                    <label>Patient has no fixed abode *</label>
                    <input type="checkbox" id="chkHomeAddressIsNoFixAbobe" name="chkHomeAddressIsNoFixAbobe" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value:HomeAddress.IsNoFixAbode, checked : HomeAddress.IsNoFixAbode, event: { click: HomeAddressIsNoFixAbodeChange }" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Home Address - Line One *</label>
                    <div class="formfieldsearch">

                        <input type="text" id="txtHomeAddressLineOne" name="txtHomeAddressLineOne" class="form-control" style="width: 76%; float: left" data-bind="value: HomeAddress.LineOne, showMessageToolTip : HomeAddress.LineOne" />
                        <div class="searchbutne" title="Refresh Address" onclick="RefreshAddress('HomeAddress');">
                            <img src="~/Images/Refresh-Icon-website-150x150.png" width="23" />
                        </div>
                        <div class="searchbutne" title="Search Address" style="width:10%" onclick="LoadOSSearch('HomeAddress');">
                            <img src="~/Images/search.png" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Home Address - Line Two</label>
                    <input type="text" id="txtHomeAddressLineTwo" name="txtHomeAddressLineTwo" class="form-control" data-bind="value: HomeAddress.LineTwo, showMessageToolTip : HomeAddress.LineTwo" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Home Address - Line Three (town) *</label>
                    <input type="text" id="txtHomeAddressLineThree" name="txtHomeAddressLineThree" class="form-control" data-bind="value: HomeAddress.LineThree, showMessageToolTip : HomeAddress.LineThree" />
                </div>

            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Home Address - Line Four (county) *</label>
                    <input type="text" id="txtHomeAddressLineFour" name="txtHomeAddressLineFour" class="form-control" data-bind="value: HomeAddress.LineFour, showMessageToolTip : HomeAddress.LineFour" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Home Address - Post Code </label>

                    <input type="text" id="txtHomeAddressPostCode" name="txtHomeAddressPostCode" class="form-control" data-bind="value: HomeAddress.PostCode, showMessageToolTip : HomeAddress.PostCode" />

                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Home Telephone Number *</label>
                    <input type="text" id="txtHomeAddressContactTelNo" name="txtHomeAddressContactTelNo" class="form-control" data-bind="value: HomeAddress.ContactTelNo,  showMessageToolTip : HomeAddress.ContactTelNo" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Alternative Contact Number *</label>
                    <input type="text" id="txtAlternateHomeAddressContactTelNo" name="txtAlternateHomeAddressContactTelNo" class="form-control" data-bind="value: HomeAddress.AlternateContactTelNo,  showMessageToolTip : HomeAddress.AlternateContactTelNo" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Alternative Contact - Relationship to patient *</label>
                    <select id="ddlHomeAddressRelationship" name="ddlHomeAddressRelationship" class="form-control" data-bind="options:Dropdown.RelationshipToPatient, optionsValue:'RelationshipToPatientId', optionsText:'RelationshipToPatientName', value:HomeAddress.RelationshipId, optionsCaption: 'Choose...', showMessageToolTip: HomeAddress.RelationshipId"></select>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                </div>
            </div>
        </div>

        <div class="mainheadingclick" style="font-size: 17px; width:100%; padding:4px">Collection Address:</div>


        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 5px; margin-bottom:15px;">
                    <label>Is this the patient home address?</label>

                    <input type="checkbox" id="chkCollectionAddressIsThisPatientHomeAddress" name="chkCollectionAddressIsThisPatientHomeAddress" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: CollectionAddress.IsThisPatientHomeAddress, checked : CollectionAddress.IsThisPatientHomeAddress,event: { click: CollectionAddresseIsThisPatientHomeAddressChange }" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Facility Type *</label>
                    <select id="ddlCollectionAddressFacilityType" name="ddlCollectionAddressFacilityType" class="form-control" data-bind="options:Dropdown.FacilityTypes, optionsValue:'FacilityTypeId', optionsText:'FacilityTypeName', value:CollectionAddress.FacilityTypeId, event:{change:getFacilities('Collection')}, optionsCaption: 'Choose...', showMessageToolTip: CollectionAddress.FacilityTypeId"></select>
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Facility Name *</label>
                    <select id="ddlCollectionAddressFacility" name="ddlCollectionAddressFacility" class="form-control" data-bind="options:CollectionAddress.Facilities, optionsValue:'FacilityId', optionsText:'FacilityName', value:CollectionAddress.FacilityId, event:{change:getFacilityAddress('Collection')}, optionsCaption: 'Choose...', showMessageToolTip: CollectionAddress.FacilityId"></select>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label id="lblCollectionDepartment">Department / Ward *</label>
                    <select id="ddlCollectionAddressDepartment" name="ddlCollectionAddressDepartment" class="form-control" data-bind="options:CollectionAddress.FacilityDepartments, optionsValue:'DepartmentId', optionsText:'DepartmentName', value:CollectionAddress.DepartmentId, optionsCaption: 'Choose...', showMessageToolTip: CollectionAddress.DepartmentId"></select>
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Collection Address - Line One *</label>
                    <div class="formfieldsearch">

                        <input type="text" id="txtCollectionAddressLineOne" name="txtCollectionAddressLineOne" class="form-control" style="width: 76%; float: left" data-bind="value: CollectionAddress.LineOne, showMessageToolTip : CollectionAddress.LineOne" />
                        <div class="searchbutne" title="Refresh Address" onclick="RefreshAddress('CollectionAddress');" style="width:10%">
                            <img src="~/Images/Refresh-Icon-website-150x150.png" width="23" />

                        </div>
                        <div class="searchbutne" title="Search Address" style="width:10%" onclick="LoadOSSearch('CollectionAddress');">
                            <img src="~/Images/search.png" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Collection Address - Line Two</label>
                    <input type="text" id="txtCollectionAddressLineTwo" name="txtCollectionAddressLineTwo" class="form-control" data-bind="value: CollectionAddress.LineTwo, showMessageToolTip : CollectionAddress.LineTwo" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Collection Address - Line Three (town) *</label>
                    <input type="text" id="txtCollectionAddressLineThree" name="txtCollectionAddressLineThree" class="form-control" data-bind="value: CollectionAddress.LineThree, showMessageToolTip : CollectionAddress.LineThree" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Collection Address - Line four (county) *</label>
                    <input type="text" id="txtCollectionAddressLineFour" name="txtCollectionAddressLineFour" class="form-control" data-bind="value: CollectionAddress.LineFour, showMessageToolTip : CollectionAddress.LineFour" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Collection Address - Post Code</label>

                    <input type="text" id="txtCollectionAddressPostCode" name="txtCollectionAddressPostCode" class="form-control" data-bind="value: CollectionAddress.PostCode, showMessageToolTip : CollectionAddress.PostCode" />

                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Contact Telephone Number *</label>
                    <input type="text" id="txtCollectionAddressContactTelNo" name="txtCollectionAddressContactTelNo" class="form-control" data-bind="value: CollectionAddress.ContactTelNo,  showMessageToolTip : CollectionAddress.ContactTelNo" />
                </div>

            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Extension Number</label>
                    <input type="text" id="txtCollectionAddressExtensionNo" name="txtCollectionAddressExtensionNo" class="form-control" data-bind="value: CollectionAddress.ExtensionNo, showMessageToolTip : CollectionAddress.ExtensionNo" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6"></div>
            </div>
        </div>

        <div class="mainheadingclick" style="font-size: 17px; width:100%; padding:4px">Destination Address:</div>


        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 5px; margin-bottom:15px;">
                    <label>Is this the patient home address?</label>
                    <input type="checkbox" id="chkDestinationAddressIsThisPatientHomeAddress" name="chkDestinationAddressIsThisPatientHomeAddress" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: DestinationAddress.IsThisPatientHomeAddress, checked : DestinationAddress.IsThisPatientHomeAddress, event: { click: DestinationAddresseIsThisPatientHomeAddressChange }" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Facility Type *</label>
                    <select id="ddlDestinationAddressFacilityType" name="ddlDestinationAddressFacilityType" class="form-control" data-bind="options:Dropdown.FacilityTypes, optionsValue:'FacilityTypeId', optionsText:'FacilityTypeName', value:DestinationAddress.FacilityTypeId,event:{change:getFacilities('Destination')}, optionsCaption: 'Choose...', showMessageToolTip: DestinationAddress.FacilityTypeId"></select>
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Facility Name*</label>
                    <select id="ddlDestinationAddressFacility" name="ddlDestinationAddressFacility" class="form-control" data-bind="options:DestinationAddress.Facilities, optionsValue:'FacilityId', optionsText:'FacilityName', value:DestinationAddress.FacilityId, event:{change:getFacilityAddress('Destination')}, optionsCaption: 'Choose...', showMessageToolTip: DestinationAddress.FacilityId"></select>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label id="lblDestinationDepartment">Department / Ward *</label>
                    <select id="ddlDestinationAddressDepartment" name="ddlDestinationAddressDepartment" class="form-control" data-bind="options:DestinationAddress.FacilityDepartments, optionsValue:'DepartmentId', optionsText:'DepartmentName', value:DestinationAddress.DepartmentId, optionsCaption: 'Choose...', showMessageToolTip: DestinationAddress.DepartmentId"></select>
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Destination Address - Line One *</label>
                    <div class="formfieldsearch">
                        <input type="text" id="txtDestinationAddressLineOne" name="txtDestinationAddressLineOne" class="form-control" style="width:76%; float: left" data-bind="value: DestinationAddress.LineOne, showMessageToolTip : DestinationAddress.LineOne" />
                        <div class="searchbutne" title="Refresh Address" onclick="RefreshAddress('DestinationAddress');" style="width:10%">
                            <img src="~/Images/Refresh-Icon-website-150x150.png" width="23" />

                        </div>
                        <div class="searchbutne" title="Search Address" style="width:10%" onclick="LoadOSSearch('DestinationAddress');">
                            <img src="~/Images/search.png" />
                        </div>

                    </div>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Destination Address - Line Two</label>
                    <input type="text" id="txtDestinationAddressLineTwo" name="txtDestinationAddressLineTwo" class="form-control" data-bind="value: DestinationAddress.LineTwo, showMessageToolTip : DestinationAddress.LineTwo" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Destination Address - Line Three (town) *</label>
                    <input type="text" id="txtDestinationAddressLineThree" name="txtDestinationAddressLineThree" class="form-control" data-bind="value: DestinationAddress.LineThree, showMessageToolTip : DestinationAddress.LineThree" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Destination Address - Line four (county) *</label>
                    <input type="text" id="txtDestinationAddressLineFour" name="txtDestinationAddressLineFour" class="form-control" data-bind="value: DestinationAddress.LineFour, showMessageToolTip : DestinationAddress.LineFour" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Destination Address - Post Code</label>

                    <input type="text" id="txtDestinationAddressPostCode" name="txtDestinationAddressPostCode" class="form-control" data-bind="value: DestinationAddress.PostCode, showMessageToolTip : DestinationAddress.PostCode" />

                </div>
                <div class="col-sm-6 col-md-6 col-lg-6 inputfloat">
                    <label>Contact Telephone Number *</label>
                    <input type="text" id="txtDestinationAddressContactTelNo" name="txtDestinationAddressContactTelNo" class="form-control" data-bind="value: DestinationAddress.ContactTelNo,   showMessageToolTip : DestinationAddress.ContactTelNo" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Extension Number</label>
                    <input type="text" id="txtDestinationAddressExtensionNo" name="txtDestinationAddressExtensionNo" class="form-control" data-bind="value: DestinationAddress.ExtensionNo, showMessageToolTip : DestinationAddress.ExtensionNo" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6"></div>
            </div>
        </div>
    </div>

    <div class="formcontaner">
        <div class="request-heading">
            <span class="mainheading">TRANSPORT REQUIREMENTS:</span>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Reason for Transport Request *</label>
                    <select id="ddlTransportRequirementTransportRequestReason" name="ddlTransportRequirementTransportRequestReason" class="form-control" data-bind="options:Dropdown.TransportRequestReasons, optionsValue:'TransportRequestReasonId', optionsText:'TransportRequestReasonName', value:TransportRequirement.TransportRequestReasonId, optionsCaption: 'Choose...', event: { change: TransportRequestReasonChange },showMessageToolTip: TransportRequirement.TransportRequestReasonId"></select>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <label>Transport Selection *</label>
                    <select id="ddlTransportRequirementTransportSelection" name="ddlTransportRequirementTransportSelection" class="form-control" data-bind="options:Dropdown.TransportSelections, optionsValue:'TransportSelectionId', optionsText:'TransportSelectionName', value:TransportRequirement.TransportSelectionId, optionsCaption: 'Choose...', event: { change: TransportSelectionChange }, showMessageToolTip: TransportRequirement.TransportSelectionId"></select>
                </div>
            </div>
        </div>

        <div id="viewASTChart">
            <span style="font-size: 14px; margin-left: 17px; float: left; text-align: left; height: 50px; margin-bottom: -23px; line-height: 50px; margin-right: 10px;">To view the Ambulance Service Transport Request Patient Type FLOW CHART&nbsp;</span>
            <a href="#" class="clickherebut" style="float: left; padding-top: 12px;margin-right: 15px;" data-bind="click: TransportRequestPatientTypeFlowChartClick">Click here </a>
        </div>

        <div class="request-heading">
            <span class="mainheading">Additional Patient Information:</span>
        </div>
        <span style="font-size: 14px; margin-left: 17px; float: left; text-align: left; width: 84%">Other Relevant Patient Information and Special Patient Requirements: (e.g. nature of illness / useful information)</span>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row">
                <div class="col-sm-6 col-md-6 col-lg-6">
                    <textarea id="txtaTransportRequirementAdditionalPatientInfo" name="txtaTransportRequirementAdditionalPatientInfo" class="form-control textareawidth" rows="3" data-bind="value: TransportRequirement.AdditionalPatientInfo, showMessageToolTip: TransportRequirement.AdditionalPatientInfo"></textarea>
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6"></div>
            </div>
        </div>

        <div class="journey-blue-text-heading" style="padding-left:12px;">Is the Patient?</div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Infectious</label>
                    <input type="checkbox" id="chkTransportRequirementIsInfectious" name="chkTransportRequirementIsInfectious" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsInfectious, checked: TransportRequirement.IsInfectious, showMessageToolTip: TransportRequirement.IsInfectious, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
            <div class="row" style="float: left; width: 100%" data-bind="visible: TransportRequirement.IsInfectious()">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 10px; margin-bottom: -10px;">
                    <label style="padding-top:21px;">Infection Selection *</label>
                    <select id="ddlTransportRequirementInfectious" name="ddlTransportRequirementInfectious" class="form-control" data-bind="options:Dropdown.Infectious, optionsValue:'InfectiousId', optionsText:'InfectiousName', value:TransportRequirement.InfectiousId, optionsCaption: 'Choose...', showMessageToolTip: TransportRequirement.InfectiousId"></select>
                </div>
            </div>
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Travelling with own oxygen (pre-prescribed)</label>
                    <input type="checkbox" id="chkTransportRequirementIsTravellingWithOwnOxygen" name="chkTransportRequirementIsTravellingWithOwnOxygen" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsTravellingWithOwnOxygen, checked: TransportRequirement.IsTravellingWithOwnOxygen, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Escort Travelling (for patients medical need)</label>
                    <input type="checkbox" id="chkTransportRequirementIsEscortTravelling" name="chkTransportRequirementIsEscortTravelling" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsEscortTravelling, checked: TransportRequirement.IsEscortTravelling, showMessageToolTip : TransportRequirement.IsEscortTravelling, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
            <div data-bind="visible: TransportRequirement.IsEscortTravelling()">
                <div class="row" style="float: left; width: 100%">
                    <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 10px; margin-bottom: -10px;">
                        <label style="padding-top:21px;">Escort Type *</label>
                        <select id="ddlTransportRequirementEscortType" name="ddlTransportRequirementEscortType" class="form-control" data-bind="options:Dropdown.EscortTypes, optionsValue:'EscortTypeId', optionsText:'EscortTypeName', value:TransportRequirement.EscortTypeId, optionsCaption: 'Choose...', showMessageToolTip: TransportRequirement.EscortTypeId"></select>
                    </div>
                </div>
                <div class="row" style="float: left; width: 100%">
                    <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 10px; margin-bottom: -10px;">
                        <label style="padding-top:21px;">Escort Number *</label>
                        <select id="ddlTransportRequirementEscortNumber" name="ddlTransportRequirementEscortNumber" class="form-control" data-bind="options:Dropdown.EscortNumbers, optionsValue:'EscortNumberId', optionsText:'EscortNumberName', value:TransportRequirement.EscortNumberId, optionsCaption: 'Choose...', showMessageToolTip: TransportRequirement.EscortNumberId"></select>
                    </div>
                </div>
            </div>
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Bariatric</label>
                    <input type="checkbox" id="chkTransportRequirementIsBariatric" name="chkTransportRequirementIsBariatric" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsBariatric, checked: TransportRequirement.IsBariatric, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Full Leg Plaster POP</label>
                    <input type="checkbox" id="chkTransportRequirementIsFullLegPlasterPOP" name="chkTransportRequirementIsFullLegPlasterPOP" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsFullLegPlasterPOP, checked: TransportRequirement.IsFullLegPlasterPOP, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Electric Wheelchair</label>
                    <input type="checkbox" id="chkTransportRequirementIsElectricWheelchair" name="chkTransportRequirementIsElectricWheelchair" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsElectricWheelchair, checked: TransportRequirement.IsElectricWheelchair, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Wheelchair +Leg Extension </label>
                    <input type="checkbox" id="chkTransportRequirementIsWheelchairAndLegExtension" name="chkTransportRequirementIsWheelchairAndLegExtension" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsWheelchairAndLegExtension, checked: TransportRequirement.IsWheelchairAndLegExtension, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Waterlow 15+ and unable to reposition themselves</label>
                    <input type="checkbox" id="chkTransportRequirementIsWaterlow" name="chkTransportRequirementIsWaterlow" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsWaterlow, checked: TransportRequirement.IsWaterlow, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>DNACPR</label>
                    <input type="checkbox" id="chkTransportRequirementIsDNACPR" name="chkTransportRequirementIsDNACPR" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsDNACPR, checked: TransportRequirement.IsDNACPR, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Diabetic</label>
                    <input type="checkbox" id="chkTransportRequirementIsDiabetic" name="chkTransportRequirementIsDiabetic" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsDiabetic, checked: TransportRequirement.IsDiabetic, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
        </div>

        <div class="contact_form col-sm-8 col-md-8">
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>Nuclear Medicine Radioactive Risk. (Patient must travel on own for return journey)</label>
                    <input type="checkbox" id="chkTransportRequirementIsNuclearMedicineRadioActiveRisk" name="chkTransportRequirementIsNuclearMedicineRadioActiveRisk" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsNuclearMedicineRadioActiveRisk, checked: TransportRequirement.IsNuclearMedicineRadioActiveRisk, validationOptions: {errorElementClass: 'checkError' }, event:{click:InfectionsCheckedChange}" />
                </div>
            </div>
            <div class="row" style="float: left; width: 100%">
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;">
                    <label>None of the Above</label>
                    <input type="checkbox" id="chkTransportRequirementIsNoneOfAbove" name="chkTransportRequirementIsNoneOfAbove" class="bulletbluecheckbox" style="float: left; margin-right: 386px;" data-bind="value: TransportRequirement.IsNoneOfAbove,checked: TransportRequirement.IsNoneOfAbove, validationOptions: {errorElementClass: 'checkError' }, event:{click:NoneofAboveCheckedChange}" />
                </div>
                <div class="col-sm-6 col-md-6 col-lg-6" style="margin-top: 21px;"></div>
            </div>
        </div>

    </div>

    <div class="formcontaner">
        <div class="request-heading">
            <span class="mainheading">CONFIRMATION:</span>
        </div>
        <div style="margin-left: 12px;  width: 95%;">
            <span style="font-size:16px">
                By confirming this booking, you confirm that the medical condition of the patient is such that they require the skills or support of PTS staff on / after the journey, and / or where it would be detrimental to the patient's condition or recovery, if they were to travel by other means.
                Where the patient's medical condition impacts on their mobility to such an extent, that they would be unable to access healthcare and / or it would be detrimental to the patient's condition or recovery to travel by other means. Where children are being conveyed, the accompanying person must be a recognised parent or guardian.
            </span>
        </div>

        <div class="sendemailcontainer">
            <div class="checkbx">
                @*<input type="checkbox" id="RiskAssessmentIsManualHandlingProfileCarriedOutYes" name="RiskAssessmentIsManualHandlingProfileCarriedOutYes" data-bind="value: RiskAssessment.IsManualHandlingProfileCarriedOutYes, checked:RiskAssessment.IsManualHandlingProfileCarriedOutYes, showMessageToolTip: RiskAssessment.IsManualHandlingProfileCarriedOutYes, validationOptions: {errorElementClass: 'checkError' }" />*@

                <input type="checkbox" data-bind="checked:sendEmail" style="margin-bottom:25px; width:100%;" />

            </div>
            <div class="chcktit" style="width:25%;">
                <strong>Send Email?</strong><br />
                <i>
                    <span style="font-size:14px;">
                        By selecting to send an email you will receive a printable pdf* version of this journey, for your records. It will be sent to your designated nhs.net email account.
                        Remember - all trips booked by members of staff at your facility/department can be viewed  on the eBooking home page ‘View Journey’
                    </span>
                </i>
            </div>
           
            <div data-bind="visible:IsComplexAllowed()">
                <div class="checkbx">
                    @*<input type="checkbox" id="RiskAssessmentIsManualHandlingProfileCarriedOutYes" name="RiskAssessmentIsManualHandlingProfileCarriedOutYes" data-bind="value: RiskAssessment.IsManualHandlingProfileCarriedOutYes, checked:RiskAssessment.IsManualHandlingProfileCarriedOutYes, showMessageToolTip: RiskAssessment.IsManualHandlingProfileCarriedOutYes, validationOptions: {errorElementClass: 'checkError' }" />*@

                    <input type="checkbox" data-bind="checked:Patient.ComplexJourney, value:Patient.ComplexJourney" style="margin-bottom:25px; width:100%;" />

                </div>
                <div class="chcktit" style="width:25%">
                    <strong>Duplicate journey?</strong><br />
                    <i>
                        <span style="font-size:14px;">
                            You can create an exact duplicate of the OUTPATIENT journey you have just requested -  by selecting this tick box. You will have the option to add a new travel date for the new/2nd journey.
                        </span>
                    </i>
                </div>
                
                <div data-bind="visible:Patient.ComplexJourney">
                    @*visible:Patient.ComplexJourney*@

                    <div class="col-sm-3" style="width:12%">2nd Journey Date</div>
                    <div class="col-sm-3">
                        <input type="text" id="txtPatientJourneyDate2" name="txtPatientJourneyDate2" class="form-control" style="margin-top:-4px;" data-bind="datepicker: Patient.JourneyDate2, datepickerOptions: { changeYear: true, changeMonth: true, dateFormat: 'dd/mm/yy', minDate: new Date(), maxDate: 42}, showMessageToolTip: Patient.JourneyDate, event:{keydown:function(data,event){datefromkeyboard(data,event,'JourneyDate2');}}, keyupBubble:false" />
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="formcontaner">
        <div class="request-heading">
            <span class="mainheading">RISK ASSESSMENT:</span>
        </div>
        <div class="journey-blue-text-heading" style="margin-bottom: 10px;">Additional Information on Property / Patient for Risk Assessment:</div>
        <div style="font-weight: bold; padding-left:12px">Please list here any information relating to <u>PROPERTY</u> risk assessment</div>
        <div style="font-weight: normal; padding-left:12px">(i.e. High number of steps, gravel drive , difficult access etc.)</div>
        <textarea id="RiskAssessmentPropertyRiskAssessment" name="RiskAssessmentPropertyRiskAssessment" class="form-control textareawidth" rows="7" data-bind="value: RiskAssessment.PropertyRiskAssessment, showMessageToolTip: RiskAssessment.PropertyRiskAssessment"></textarea>
        <div style="font-weight: bold; padding-top: 20px; padding-left:12px">Please list here any information relating to <u>PATIENT</u> risk assessment</div>
        <div style="font-weight: normal; padding-left:12px">(i.e. Size, weight, disability, mobility etc.)</div>
        <textarea id="RiskAssessmentPatientRiskAssessment" name="RiskAssessmentPatientRiskAssessment" class="form-control textareawidth" rows="7" data-bind="value: RiskAssessment.PatientRiskAssessment, showMessageToolTip: RiskAssessment.PatientRiskAssessment"></textarea>
        <div style="font-weight: bold; padding-top: 20px; width: 100%;height: 56px; padding-left:12px"> Has a full Manual Handling Profile been carried out?</div>
        <div style="float:left; width:100%; padding-left:12px">
            <div class="chcktit">Yes</div>
            <div class="checkbx">
                <input type="checkbox" id="RiskAssessmentIsManualHandlingProfileCarriedOutYes" name="RiskAssessmentIsManualHandlingProfileCarriedOutYes" data-bind="value: RiskAssessment.IsManualHandlingProfileCarriedOutYes, checked:RiskAssessment.IsManualHandlingProfileCarriedOutYes, showMessageToolTip: RiskAssessment.IsManualHandlingProfileCarriedOutYes, event:{click:chkManualHandlingYes}, validationOptions: {errorElementClass: 'checkError' }" />
            </div>

            <div class="chcktit">No</div>
            <div class="checkbx">
                <input type="checkbox" id="RiskAssessmentIsManualHandlingProfileCarriedOutNo" name="RiskAssessmentIsManualHandlingProfileCarriedOutNo" data-bind="value: RiskAssessment.IsManualHandlingProfileCarriedOutNo, checked:RiskAssessment.IsManualHandlingProfileCarriedOutNo, showMessageToolTip: RiskAssessment.IsManualHandlingProfileCarriedOutNo, event:{click:chkManualHandlingNo}, validationOptions: {errorElementClass: 'checkError' }" />
            </div>
        </div>
    </div>
    <div id="PatientFoundDialog">
        <div class="popup-header">
            <div class='popup-header-text'>Important</div>
        </div>
        <div class="popupredtxt">
            Patient with the provided NHS Number already exists.
        </div>

        <div class="popup-button" data-bind="click: PatientFoundDialogOkClick, clickBubble: false">Ok</div>
    </div>
    <div id="DataClearConfirmationDialog">
        <div class="popup-header">
            <div class='popup-header-text'>Important</div>
        </div>
        <div class="popupredtxt">
            Moving back further will erase data from this page and next pages. Do you still want to continue?
        </div>

        <div class="popup-button" data-bind="click: DataClearConfirmationDialogOkClick, clickBubble: false">Ok</div>
        <div class="popup-button" data-bind="click: DataClearConfirmationDialogCancelClick, clickBubble: false">Cancel</div>
    </div>
    <div class="formcontaner">
        <div class="request-heading">
            <span class="mainheading">SPECIALIST TRANSPORT REQUEST:</span>
        </div>
        <div style="font-weight: normal; color:#007ac3; padding-left:12px">
            Specialist Transport involves the provision of an ambulance or other specialised vehicle to meet the transport needs of a patient’s programme of care. Decisions as to whom should receive NHS funded Specialist Transport will be made either by the Consultant or General Practitioner on the basis of a clinical assessment of medical need.<br />
            <div style="font-weight: bold; padding-top: 20px; ">
                This is to confirm that the following Patient requires Specialist Transport:<br />
            </div>Specialist transport will be funded by the NHS in cases where TWO sets of circumstances apply:
        </div>
        <div class="mainheadingclick" style="font-size: 17px; width:100%; padding:4px">Please complete this form to confirm that the Patient requires Specialist Transport:</div>
        <div style="font-weight: normal; padding-top: 20px; font-weight: bold; color:#007ac3; padding-left:12px">
            1) Please confirm that one or more of the following situations exist by ticking the appropriate boxes.<br />
        </div>
        <div style="font-weight: normal; padding-top: 0px; color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsHandledByProfessional" name="SpecialistTransportRequestIsHandledByProfessional" data-bind="value: SpecialistTransportRequest.IsHandledByProfessional, checked: SpecialistTransportRequest.IsHandledByProfessional, showMessageToolTip: SpecialistTransportRequest.IsHandledByProfessional, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;A) The patient suffers from a condition which may become worse unless they are lifted or handled by those with professional training in these skills
        </div>
        <div style="font-weight: normal; padding-top: 0px;  color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsWhilstLayingDown" name="SpecialistTransportRequestIsWhilstLayingDown" data-bind="value: SpecialistTransportRequest.IsWhilstLayingDown, checked: SpecialistTransportRequest.IsWhilstLayingDown, showMessageToolTip: SpecialistTransportRequest.IsWhilstLayingDown, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;B) The patient can only be moved whilst laying down
        </div>
        <div style="font-weight: normal; padding-top: 0px;  color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsOxygenTheropy" name="SpecialistTransportRequestIsOxygenTheropy" data-bind="value: SpecialistTransportRequest.IsOxygenTheropy, checked: SpecialistTransportRequest.IsOxygenTheropy, showMessageToolTip: SpecialistTransportRequest.IsOxygenTheropy, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;C) The patient requires oxygen therapy
        </div>
        <div style="font-weight: normal; padding-top: 0px;  color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsPrecludesTravelling" name="SpecialistTransportRequestIsPrecludesTravelling" data-bind="value: SpecialistTransportRequest.IsPrecludesTravelling, checked: SpecialistTransportRequest.IsPrecludesTravelling, showMessageToolTip: SpecialistTransportRequest.IsPrecludesTravelling, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;D) The patient has a disability which precludes travelling in a car (whether ordinary or suitably adapted) and has no access to suitable alternative means of transport
        </div>

        <div style="font-weight: normal; padding-top: 20px; font-weight: bold;  color:#007ac3; padding-left:12px">
            2) Where the patient needs either:<br />
        </div>
        <div style="font-weight: normal; padding-top: 0px;  color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsAdmission" name="SpecialistTransportRequestIsAdmission" data-bind="value: SpecialistTransportRequest.IsAdmission, checked: SpecialistTransportRequest.IsAdmission, showMessageToolTip: SpecialistTransportRequest.IsAdmission, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;A) IsAdmission to a Nursing or Residential home
        </div>
        <div style="font-weight: normal; padding-top: 0px;  color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsVisitOrAdmitted" name="SpecialistTransportRequestIsVisitOrAdmitted" data-bind="value: SpecialistTransportRequest.IsVisitOrAdmitted, checked: SpecialistTransportRequest.IsVisitOrAdmitted, showMessageToolTip: SpecialistTransportRequest.IsVisitOrAdmitted, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;B) To visit or to be admitted to a Hospital or Hospice for treatment
        </div>
        <div style="font-weight: normal; padding-top: 0px;  color:#007ac3; padding-left:12px">
            <input type="checkbox" id="SpecialistTransportRequestIsVisit" name="SpecialistTransportRequestIsVisit" data-bind="value: SpecialistTransportRequest.IsVisit, checked: SpecialistTransportRequest.IsVisit, showMessageToolTip: SpecialistTransportRequest.IsVisit, validationOptions: {errorElementClass: 'checkError' }" />&nbsp;&nbsp;C) To make visits to and from a Residential Care Home, Nursing Home or their own home to Health care facilities such as GP Surgeries, Health
            Centres and Community Clinics, particularly for services normally only provided at Hospital
        </div>

        <div style="font-weight: bold; padding-top: 20px;  color:#007ac3; padding-left:12px">Non Specialist transport should be the first option considered in all situations except where it use would endanger the Patient’s health or place the Driver at risk. For many Patients unable to use Public Transport, travelling with Relatives or friends in a familiar vehicle can be less stressful than travelling in unfamiliar Specialist Transport. In cases where specialist transport is required according to these criteria, this will be provided by the Ambulance Ser-vice. It will be for the Ambulance Service to determine the appropriate vehicle for the Patient’s needs.</div>

        <div style="margin-top: 20px; width: 100%; float: left">
            <label style="padding-top: 11px; width: 275px; padding-left:12px">Name of Authorising Consultant / GP</label>
            <input type="text" id="SpecialistTransportRequestAuthorisingConsultantOrGP" name="SpecialistTransportRequestAuthorisingConsultantOrGP" class="form-control" data-bind="value: SpecialistTransportRequest.AuthorisingConsultantOrGP, showMessageToolTip: SpecialistTransportRequest.AuthorisingConsultantOrGP" style="width: 50%; margin-left: 20px; float: left" />
        </div>

        <div style="margin-top: -20px; width: 100%; float: left; padding-left:12px">
            <label style="padding-top: 11px; width: 275px;">Name of Authorising Practice</label>
            <input type="text" id="SpecialistTransportRequestAuthorisingPracticeName" name="SpecialistTransportRequestAuthorisingPracticeName" class="form-control" data-bind="value: SpecialistTransportRequest.AuthorisingPracticeName, showMessageToolTip: SpecialistTransportRequest.AuthorisingPracticeName" style="width: 50%; margin-left: 20px; float: left" />
        </div>

        <div style="font-weight: normal; padding-top: 20px; font-weight: bold; padding-left:12px">
            I confirm that:<br />
        </div>
        <div style="font-weight: normal; padding-top: 0px">&nbsp;&nbsp;1) This Patient is UNABLE to be transported by another method and meets the eligibility criteria.</div>
        <div style="font-weight: normal; padding-top: 0px">&nbsp;&nbsp;B) The GP/consultant named above has authorised this trip.</div>
        <br />&nbsp;&nbsp;
        <input type="checkbox" id="chkTransportRequirementIsElectricWheelchair" name="chkTransportRequirementIsElectricWheelchair" class="bulletbluecheckbox" style="float: left; margin-right: 0px;" data-bind="value: TransportRequirement.IsElectricWheelchair, checked: TransportRequirement.IsElectricWheelchair, validationOptions: {errorElementClass: 'checkError' }" /><span style="display: inline-block;height: 22px;line-height: 40px; color: #007ac3;"><b> Confirm eligibility</b></span>

    </div>


</div>





