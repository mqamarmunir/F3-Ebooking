/*! mailcheck v1.0.4 (c)2012 Received Inc, @licence MIT */String.prototype.trim || (String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, "") }); var Kicksend = { mailcheck: { defaultDomains: ["yahoo.com", "google.com", "hotmail.com", "gmail.com", "me.com", "aol.com", "mac.com", "live.com", "comcast.net", "googlemail.com", "msn.com", "hotmail.co.uk", "yahoo.co.uk", "facebook.com", "verizon.net", "sbcglobal.net", "att.net", "gmx.com", "mail.com", "outlook.com", "icloud.com"], defaultTopLevelDomains: ["co.jp", "co.uk", "com", "net", "org", "info", "edu", "gov", "mil", "ca"], run: function (a) { var b, c = function (a) { return a }, d = a.suggested || c, e = a.empty || c; return b = this.suggest(a), b ? d(b) : e() }, suggest: function (a) { a.email = this.encodeEmail(a.email).toLowerCase(), a.domains = a.domains || this.defaultDomains, a.topLevelDomains = a.topLevelDomains || this.defaultTopLevelDomains, a.distanceFunction = a.distanceFunction || Kicksend.sift3Distance, a.threshold = a.threshold || {}, a.threshold.domain = a.threshold.domain || 3, a.threshold.tld = a.threshold.tld || 2; var b = this.splitEmail(a.email), c = this.findClosestDomain(b.domain, a.domains, a.distanceFunction, a.threshold.domain); if (c) { if (c !== b.domain) return { address: b.address, domain: c, full: b.address + "@" + c } } else { var d = this.findClosestDomain(b.topLevelDomain, a.topLevelDomains, a.distanceFunction, a.threshold.tld); if (b.domain && d && d !== b.topLevelDomain) { var e = b.domain; return c = e.substring(0, e.lastIndexOf(b.topLevelDomain)) + d, { address: b.address, domain: c, full: b.address + "@" + c } } } return !1 }, findClosestDomain: function (a, b, c, d) { var e, f = 99, g = null; if (!a || !b) return !1; c = c || this.sift3Distance, d = d || 3; for (var h = 0; h < b.length; h++) { if (a === b[h]) return a; e = c(a, b[h]), f > e && (f = e, g = b[h]) } return d >= f && null !== g ? g : !1 }, sift3Distance: function (a, b) { if (null === a || 0 === a.length) return null === b || 0 === b.length ? 0 : b.length; if (null === b || 0 === b.length) return a.length; for (var c = 0, d = 0, e = 0, f = 0, g = 5; c + d < a.length && c + e < b.length;) { if (a.charAt(c + d) === b.charAt(c + e)) f++; else { d = 0, e = 0; for (var h = 0; g > h; h++) { if (c + h < a.length && a.charAt(c + h) === b.charAt(c)) { d = h; break } if (c + h < b.length && a.charAt(c) === b.charAt(c + h)) { e = h; break } } } c++ } return (a.length + b.length) / 2 - f }, splitEmail: function (a) { var b, c = a.trim().split("@"); if (c.length < 2) return !1; for (b = 0; b < c.length; b++) if ("" === c[b]) return !1; var d = c.pop(), e = d.split("."), f = ""; if (0 === e.length) return !1; if (1 === e.length) f = e[0]; else { for (b = 1; b < e.length; b++) f += e[b] + "."; e.length >= 2 && (f = f.substring(0, f.length - 1)) } return { topLevelDomain: f, domain: d, address: c.join("@") } }, encodeEmail: function (a) { var b = encodeURI(a); return b = b.replace("%20", " ").replace("%25", "%").replace("%5E", "^").replace("%60", "`").replace("%7B", "{").replace("%7C", "|").replace("%7D", "}") } } }; "undefined" != typeof module && module.exports && (module.exports = Kicksend.mailcheck), "undefined" != typeof window && window.jQuery && !function (a) { a.fn.mailcheck = function (a) { var b = this; if (a.suggested) { var c = a.suggested; a.suggested = function (a) { c(b, a) } } if (a.empty) { var d = a.empty; a.empty = function () { d.call(null, b) } } a.email = this.val(), Kicksend.mailcheck.run(a) } }(jQuery);